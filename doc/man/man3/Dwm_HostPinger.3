.TH "Dwm::HostPinger" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::HostPinger \- Encapsulates a 'pinger', which can 'ping' one or more hosts using TCP or ICMP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmHostPinger\&.hh>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBReceiver\fP"
.br
.RI "Data callback interface\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHostPinger\fP (uint16_t identifier, const std::string &device='lo0')"
.br
.RI "Construct with the given \fRidentifier\fP (normally getpid() & 0xFFFF)\&. "
.ti -1c
.RI "bool \fBAddDestination\fP (const \fBPingDestination\fP &destination)"
.br
.RI "Adds a destination\&. Returns true on success\&. "
.ti -1c
.RI "uint16_t \fBPacketRate\fP () const"
.br
.RI "Returns the packet rate\&. "
.ti -1c
.RI "uint16_t \fBPacketRate\fP (uint16_t pps)"
.br
.RI "Sets and returns the packet rate in packets/sec\&. "
.ti -1c
.RI "uint32_t \fBPacketsSent\fP (const \fBPingDestination\fP &destination) const"
.br
.RI "Returns the number of packets sent to the given \fRdestination\fP\&. "
.ti -1c
.RI "uint32_t \fBPacketsReceived\fP (const \fBPingDestination\fP &destination) const"
.br
.RI "Returns the number of packets received from the given \fRdestination\fP\&. "
.ti -1c
.RI "float \fBPacketLoss\fP (const \fBPingDestination\fP &destination) const"
.br
.RI "Returns the percent packet loss for the given \fRdestination\fP\&. "
.ti -1c
.RI "bool \fBStart\fP (int count=0)"
.br
.RI "Starts the pinger\&. Returns true on success\&. "
.ti -1c
.RI "bool \fBStop\fP ()"
.br
.RI "Stops the pinger\&. Returns true on success\&. "
.ti -1c
.RI "bool \fBOutstanding\fP ()"
.br
.RI "Returns true if we have not yet received replies for some of the packets we sent\&. "
.ti -1c
.RI "bool \fBSenderDone\fP () const"
.br
.ti -1c
.RI "bool \fBStopSender\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBReceiver\fP * \fBGetReceiver\fP ()"
.br
.RI "Returns the \fBReceiver\fP registered to receive ping data\&. "
.ti -1c
.RI "static \fBReceiver\fP * \fBSetReceiver\fP (\fBReceiver\fP *receiver)"
.br
.RI "Registers \fRreceiver\fP to receive ping data\&. "
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef std::map< \fBPingDestination\fP, \fBPingDestinationEntry\fP > \fBDestinationMap\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBGetTcpPacket\fP (const \fBPingDestination\fP &destination, uint16_t seq, std::string &s)"
.br
.ti -1c
.RI "void \fBRunWatcher\fP ()"
.br
.ti -1c
.RI "void \fBRunSender\fP ()"
.br
.ti -1c
.RI "bool \fBStopWatcher\fP ()"
.br
.ti -1c
.RI "bool \fBAllPacketsSent\fP () const"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static void \fBPcapCallback\fP (uint8_t *user, const struct pcap_pkthdr *pchdr, const uint8_t *pkt)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::string \fB_device\fP"
.br
.ti -1c
.RI "\fBIpv4Address\fP \fB_myAddress\fP"
.br
.ti -1c
.RI "std::thread \fB_watcherThread\fP"
.br
.ti -1c
.RI "std::thread \fB_senderThread\fP"
.br
.ti -1c
.RI "std::atomic< bool > \fB_senderDone\fP"
.br
.ti -1c
.RI "std::mutex \fB_watcherReadyMutex\fP"
.br
.ti -1c
.RI "std::unique_lock< std::mutex > \fB_watcherReadyLock\fP"
.br
.ti -1c
.RI "std::condition_variable \fB_watcherReady\fP"
.br
.ti -1c
.RI "std::atomic< bool > \fB_runSender\fP"
.br
.ti -1c
.RI "std::atomic< bool > \fB_runWatcher\fP"
.br
.ti -1c
.RI "uint16_t \fB_identifier\fP"
.br
.ti -1c
.RI "\fBSocket\fP \fB_socket\fP"
.br
.ti -1c
.RI "uint16_t \fB_packetRate\fP"
.br
.ti -1c
.RI "\fBPcap\fP \fB_pcap\fP"
.br
.ti -1c
.RI "int \fB_count\fP"
.br
.ti -1c
.RI "int \fB_packetsDesired\fP"
.br
.ti -1c
.RI "bool \fB_forever\fP"
.br
.ti -1c
.RI "DestinationMap \fB_destinations\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static \fBReceiver\fP * \fB_receiver\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Encapsulates a 'pinger', which can 'ping' one or more hosts using TCP or ICMP\&. 
.SH "Member Function Documentation"
.PP 
.SS "uint16_t Dwm::HostPinger::PacketRate () const"

.PP
Returns the packet rate\&. This is divided across all destinations; if the packet rate is 10 and there are 5 destinations, each destination will get 10/5 == 2 packets/sec\&. 
.SS "uint16_t Dwm::HostPinger::PacketRate (uint16_t pps)"

.PP
Sets and returns the packet rate in packets/sec\&. This is divided across all destinations; if the packet rate is 10 and there are 5 destinations, each destination will get 10/5 == 2 packets/sec\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
