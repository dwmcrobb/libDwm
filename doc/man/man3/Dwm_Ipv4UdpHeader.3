.TH "Dwm::Ipv4UdpHeader" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::Ipv4UdpHeader \- Encapsulates an IPv4 UDP header\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmIpv4UdpHeader\&.hh>\fP
.PP
Inherits \fBDwm::DescriptorIOCapable\fP, Dwm::FileIOCapable, \fBDwm::StreamIOCapable\fP, \fBDwm::StreamedLengthCapable\fP, \fBDwm::GZIOCapable\fP, and \fBDwm::BZ2IOCapable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIpv4UdpHeader\fP ()"
.br
.RI "Constructor\&. The new object will own the underlying memory\&. "
.ti -1c
.RI "\fBIpv4UdpHeader\fP (const \fBIpv4PacketHeader\fP &ipHeader)"
.br
.RI "Construct from the given IPv4 packet header \fRipHeader\fP\&. "
.ti -1c
.RI "\fBIpv4UdpHeader\fP (const \fBIpv4UdpHeader\fP &udpHeader)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBIpv4UdpHeader\fP (struct udphdr *udpHdr)"
.br
.RI "Construct from a pointer to an existing udphdr\&. "
.ti -1c
.RI "\fBIpv4UdpHeader\fP (const struct udphdr &udpHdr)"
.br
.RI "Constructor\&. Copies the contents of \fRudpHdr\fP\&. The new object will\&. "
.ti -1c
.RI "\fBIpv4UdpHeader\fP & \fBoperator=\fP (const \fBIpv4UdpHeader\fP &udpHeader)"
.br
.RI "operator = "
.ti -1c
.RI "\fB~Ipv4UdpHeader\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "uint16_t \fBSourcePort\fP () const"
.br
.RI "Returns the UDP source port in host byte order\&. "
.ti -1c
.RI "uint16_t \fBSourcePort\fP (uint16_t port)"
.br
.RI "Sets the UDP source port to \fRport\fP, which must be in host byte order\&. "
.ti -1c
.RI "uint16_t \fBDestinationPort\fP () const"
.br
.RI "Returns the UDP destination port in host byte order\&. "
.ti -1c
.RI "uint16_t \fBDestinationPort\fP (uint16_t port)"
.br
.RI "Sets the UDP destination port to \fRport\fP, which must be in host byte order\&. "
.ti -1c
.RI "uint16_t \fBUdpLength\fP () const"
.br
.RI "Returns the UDP length in host byte order\&. "
.ti -1c
.RI "uint16_t \fBUdpLength\fP (uint16_t udpLength)"
.br
.RI "Sets and returns the UDP length in host byte order\&. "
.ti -1c
.RI "uint16_t \fBUdpChecksum\fP () const"
.br
.RI "Returns the UDP checksum field\&. "
.ti -1c
.RI "void \fBSetUdpChecksum\fP (const \fBIpv4PacketHeader\fP &ipHeader, const std::string &data)"
.br
.RI "Calculates and sets the UDP checksum field, which requires the UDP payload \fRdata\fP and some fields from the IP header\&. "
.ti -1c
.RI "void \fBSetUdpChecksum\fP (const \fBIpv4PacketHeader\fP &ipHeader, const \fBIpv4UdpPayload\fP &data)"
.br
.RI "Calculates and sets the UDP checksum field, which requires the UDP payload \fRdata\fP and some fields from the IP header\&. "
.ti -1c
.RI "uint8_t * \fBEnd\fP () const"
.br
.ti -1c
.RI "std::istream & \fBRead\fP (std::istream &is) override"
.br
.RI "Reads the UDP header from an istream\&. Returns the istream\&. "
.ti -1c
.RI "std::ostream & \fBWrite\fP (std::ostream &os) const override"
.br
.RI "Writes the UDP header to an ostream\&. Returns the ostream\&. "
.ti -1c
.RI "ssize_t \fBRead\fP (int fd) override"
.br
.RI "Reads the UDP header from a file descriptor\&. "
.ti -1c
.RI "ssize_t \fBWrite\fP (int fd) const override"
.br
.RI "Writes the UDP header to a file descriptor\&. "
.ti -1c
.RI "size_t \fBRead\fP (FILE *f) override"
.br
.RI "Reads the UDP header from a FILE\&. "
.ti -1c
.RI "size_t \fBWrite\fP (FILE *f) const override"
.br
.RI "Writes the UDP header to a FILE\&. "
.ti -1c
.RI "uint64_t \fBStreamedLength\fP () const override"
.br
.RI "Returns the number of bytes that would be written if we called one of the \fBWrite()\fP members\&. "
.ti -1c
.RI "int \fBRead\fP (gzFile gzf) override"
.br
.RI "Reads the UDP header from a gzFile\&. "
.ti -1c
.RI "int \fBWrite\fP (gzFile gzf) const override"
.br
.RI "Writes the UDP header to a gzFile\&. "
.ti -1c
.RI "int \fBBZRead\fP (BZFILE *bzf) override"
.br
.RI "Reads the UDP header from a BZFILE\&. "
.ti -1c
.RI "int \fBBZWrite\fP (BZFILE *bzf) const override"
.br
.RI "Writes the UDP header to a BZFILE\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBIpv4UdpHeader\fP &udpHeader) const"
.br
.RI "operator == "
.ti -1c
.RI "std::ostream & \fBPrintXML\fP (std::ostream &os, const std::string &pre='') const"
.br
.RI "Print the UDP header to an ostream in pseudo-XML, with each line prefixed by \fRpre\fP\&. "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::StreamReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::StreamWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::GZReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::GZWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZWritable\fP ()"
.br
.RI "destructor "
.in -1c
.SH "Detailed Description"
.PP 
Encapsulates an IPv4 UDP header\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Dwm::Ipv4UdpHeader::Ipv4UdpHeader (struct udphdr * udpHdr)"

.PP
Construct from a pointer to an existing udphdr\&. We will not copy the contents of \fRudpHdr\fP, it will continue to be owned by the caller\&. This is useful when the caller wishes to use this class for manipulating an existing udphdr\&. 
.SS "Dwm::Ipv4UdpHeader::~Ipv4UdpHeader ()"

.PP
Destructor\&. If the object owns the underlying memory, the underlying memory will be freed\&. 
.SH "Member Function Documentation"
.PP 
.SS "int Dwm::Ipv4UdpHeader::BZRead (BZFILE * bzf)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the UDP header from a BZFILE\&. Returns the number of bytes read on success (should be equal to \fBStreamedLength()\fP), -1 on failure\&. 
.PP
Implements \fBDwm::BZ2Readable\fP\&.
.SS "int Dwm::Ipv4UdpHeader::BZWrite (BZFILE * bzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the UDP header to a BZFILE\&. Returns the number of bytes written on success (should be equal to \fBStreamedLength()\fP), -1 on failure\&. 
.PP
Implements \fBDwm::BZ2Writable\fP\&.
.SS "uint16_t Dwm::Ipv4UdpHeader::DestinationPort (uint16_t port)"

.PP
Sets the UDP destination port to \fRport\fP, which must be in host byte order\&. Returns the UDP destination port in host byte order\&. 
.SS "std::ostream & Dwm::Ipv4UdpHeader::PrintXML (std::ostream & os, const std::string & pre = \fR''\fP) const"

.PP
Print the UDP header to an ostream in pseudo-XML, with each line prefixed by \fRpre\fP\&. Returns the ostream\&. 
.SS "size_t Dwm::Ipv4UdpHeader::Read (FILE * f)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the UDP header from a FILE\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileReadable\fP\&.
.SS "int Dwm::Ipv4UdpHeader::Read (gzFile gzf)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the UDP header from a gzFile\&. Returns the number of bytes read on success (should be equal to \fBStreamedLength()\fP), -1 on failure\&. 
.PP
Implements \fBDwm::GZReadable\fP\&.
.SS "ssize_t Dwm::Ipv4UdpHeader::Read (int fd)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the UDP header from a file descriptor\&. Returns the number of bytes read on success (should be equal to \fBStreamedLength()\fP), -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorReadable\fP\&.
.SS "std::istream & Dwm::Ipv4UdpHeader::Read (std::istream & is)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the UDP header from an istream\&. Returns the istream\&. 
.PP
Implements \fBDwm::StreamReadable\fP\&.
.SS "uint16_t Dwm::Ipv4UdpHeader::SourcePort (uint16_t port)"

.PP
Sets the UDP source port to \fRport\fP, which must be in host byte order\&. Returns the UDP source port in host byte order\&. 
.SS "uint64_t Dwm::Ipv4UdpHeader::StreamedLength () const\fR [override]\fP, \fR [virtual]\fP"

.PP
Returns the number of bytes that would be written if we called one of the \fBWrite()\fP members\&. 
.PP
Implements \fBDwm::StreamedLengthCapable\fP\&.
.SS "uint16_t Dwm::Ipv4UdpHeader::UdpLength () const"

.PP
Returns the UDP length in host byte order\&. The UDP length field includes the bytes for both the UDP header and the UDP payload\&. 
.SS "uint16_t Dwm::Ipv4UdpHeader::UdpLength (uint16_t udpLength)"

.PP
Sets and returns the UDP length in host byte order\&. The UDP length field includes the bytes for both the UDP header and the UDP payload\&. 
.SS "size_t Dwm::Ipv4UdpHeader::Write (FILE * f) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the UDP header to a FILE\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileWritable\fP\&.
.SS "int Dwm::Ipv4UdpHeader::Write (gzFile gzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the UDP header to a gzFile\&. Returns the number of bytes written on success (should be equal to \fBStreamedLength()\fP), -1 on failure\&. 
.PP
Implements \fBDwm::GZWritable\fP\&.
.SS "ssize_t Dwm::Ipv4UdpHeader::Write (int fd) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the UDP header to a file descriptor\&. Returns the number of bytes written on success (should be equal to \fBStreamedLength()\fP), -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorWritable\fP\&.
.SS "std::ostream & Dwm::Ipv4UdpHeader::Write (std::ostream & os) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the UDP header to an ostream\&. Returns the ostream\&. 
.PP
Implements \fBDwm::StreamWritable\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
