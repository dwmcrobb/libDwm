.TH "Dwm::Ipv6Prefix" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::Ipv6Prefix \- This class encapsulates an IPv6 network prefix\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmIpv6Prefix\&.hh>\fP
.PP
Inherits \fBDwm::ASIOCapable\fP, \fBDwm::DescriptorIOCapable\fP, Dwm::FileIOCapable, \fBDwm::StreamIOCapable\fP, \fBDwm::GZIOCapable\fP, \fBDwm::BZ2IOCapable\fP, and \fBDwm::StreamedLengthCapable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIpv6Prefix\fP ()"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fBIpv6Prefix\fP (const std::string &prefix)"
.br
.RI "Construct from a string\&. "
.ti -1c
.RI "\fBIpv6Prefix\fP (const \fBIpv6Address\fP &network, uint8_t maskLength)"
.br
.RI "Construct from an IPv6 network address and netmask length\&. "
.ti -1c
.RI "\fBIpv6Prefix\fP (const \fBIpv6Prefix\fP &prefix)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBIpv6Address\fP \fBNetwork\fP () const"
.br
.RI "Returns the network address\&. "
.ti -1c
.RI "const in6_addr & \fBIn6Addr\fP () const"
.br
.ti -1c
.RI "\fBIpv6Address\fP \fBNetmask\fP () const"
.br
.RI "Returns the netmask\&. "
.ti -1c
.RI "uint8_t \fBMaskLength\fP () const"
.br
.RI "Returns the netmask length\&. "
.ti -1c
.RI "uint8_t \fBMaskLength\fP (uint8_t maskLen)"
.br
.RI "Sets and returns the netmask length\&. "
.ti -1c
.RI "bool \fBSet\fP (const \fBIpv6Address\fP &network, uint8_t maskLength)"
.br
.RI "Set the prefix using a network address and netmask length\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBIpv6Prefix\fP &prefix) const"
.br
.RI "Less-than operator\&. "
.ti -1c
.RI "bool \fBoperator>\fP (const \fBIpv6Prefix\fP &prefix) const"
.br
.RI "Greater-than operator\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBIpv6Prefix\fP &prefix) const"
.br
.RI "Equal-to operator\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBIpv6Prefix\fP &prefix) const"
.br
.RI "Not-equal-to operator\&. "
.ti -1c
.RI "bool \fBContains\fP (const \fBIpv6Address\fP &addr) const"
.br
.RI "Returns true if \fRaddr\fP falls within the prefix\&. "
.ti -1c
.RI "ssize_t \fBRead\fP (int fd) override"
.br
.RI "Reads the prefix from a file descriptor\&. "
.ti -1c
.RI "ssize_t \fBWrite\fP (int fd) const override"
.br
.RI "Writes the prefix to a file descriptor\&. "
.ti -1c
.RI "size_t \fBRead\fP (FILE *f) override"
.br
.RI "Reads the prefix from a FILE pointer\&. "
.ti -1c
.RI "size_t \fBWrite\fP (FILE *f) const override"
.br
.RI "Writes the prefix to a FILE pointer\&. "
.ti -1c
.RI "std::istream & \fBRead\fP (std::istream &is) override"
.br
.RI "Reads the prefix from an istream\&. Returns the istream\&. "
.ti -1c
.RI "std::ostream & \fBWrite\fP (std::ostream &os) const override"
.br
.RI "Writes the prefix to an ostream\&. Returns the ostream\&. "
.ti -1c
.RI "int \fBRead\fP (gzFile gzf) override"
.br
.RI "Reads the prefix from a gzFile\&. "
.ti -1c
.RI "int \fBWrite\fP (gzFile gzf) const override"
.br
.RI "Writes the prefix to a gzFile\&. "
.ti -1c
.RI "int \fBBZRead\fP (BZFILE *bzf) override"
.br
.RI "Reads the prefix from a BZFILE pointer\&. "
.ti -1c
.RI "int \fBBZWrite\fP (BZFILE *bzf) const override"
.br
.RI "Writes the prefix to a BZFILE pointer\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::ip::tcp::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the prefix from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::ip::tcp::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the prefix to \fRs\fP\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::local::stream_protocol::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the prefix from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::local::stream_protocol::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the prefix to \fRs\fP\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::generic::stream_protocol::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the prefix from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::generic::stream_protocol::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the prefix to \fRs\fP\&. "
.ti -1c
.RI "uint64_t \fBStreamedLength\fP () const override"
.br
.RI "Return the number of bytes that would be written if the object's Write(ostream &), Write(FILE *) or Write(int) member were called\&. "
.ti -1c
.RI "std::string \fBToString\fP () const"
.br
.RI "Returns a string representation of the prefix in the usual form, for example '1234:5678::/32'\&. "
.ti -1c
.RI "uint64_t \fBHash\fP () const"
.br
.RI "Given that the number of IPv6 addresses I typically deal with is nowhere near 4 billion, a 32-bit hash is sufficient if its distribution is effective\&. "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::StreamReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::StreamWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::GZReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::GZWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZWritable\fP ()"
.br
.RI "destructor "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, const \fBIpv6Prefix\fP &prefix)"
.br
.RI "Prints a prefix to an ostream in the usual colon-delimited form\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class encapsulates an IPv6 network prefix\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Dwm::Ipv6Prefix::Ipv6Prefix (const \fBIpv6Address\fP & network, uint8_t maskLength)"

.PP
Construct from an IPv6 network address and netmask length\&. The network address may be a host address; this constructor will apply the netmask\&. 
.SH "Member Function Documentation"
.PP 
.SS "int Dwm::Ipv6Prefix::BZRead (BZFILE * bzf)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from a BZFILE pointer\&. 
.PP
Implements \fBDwm::BZ2Readable\fP\&.
.SS "int Dwm::Ipv6Prefix::BZWrite (BZFILE * bzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to a BZFILE pointer\&. 
.PP
Implements \fBDwm::BZ2Writable\fP\&.
.SS "uint64_t Dwm::Ipv6Prefix::Hash () const\fR [inline]\fP"

.PP
Given that the number of IPv6 addresses I typically deal with is nowhere near 4 billion, a 32-bit hash is sufficient if its distribution is effective\&. And it's faster on small 32-bit platforms\&. Hence I'm currently using XXH32(), and only on the non-zero bytes of the address\&. Yes, that means I'll have collisions for some prefixes but it's a small (near 0) number in my usage\&. I'm looking for average speed here\&. 
.SS "bool Dwm::Ipv6Prefix::Read (boost::asio::generic::stream_protocol::socket & s, boost::system::error_code & ec)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "bool Dwm::Ipv6Prefix::Read (boost::asio::ip::tcp::socket & s, boost::system::error_code & ec)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "bool Dwm::Ipv6Prefix::Read (boost::asio::local::stream_protocol::socket & s, boost::system::error_code & ec)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "size_t Dwm::Ipv6Prefix::Read (FILE * f)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from a FILE pointer\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileReadable\fP\&.
.SS "int Dwm::Ipv6Prefix::Read (gzFile gzf)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from a gzFile\&. 
.PP
Implements \fBDwm::GZReadable\fP\&.
.SS "ssize_t Dwm::Ipv6Prefix::Read (int fd)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from a file descriptor\&. 
.PP
Implements \fBDwm::DescriptorReadable\fP\&.
.SS "std::istream & Dwm::Ipv6Prefix::Read (std::istream & is)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from an istream\&. Returns the istream\&. 
.PP
Implements \fBDwm::StreamReadable\fP\&.
.SS "bool Dwm::Ipv6Prefix::Set (const \fBIpv6Address\fP & network, uint8_t maskLength)"

.PP
Set the prefix using a network address and netmask length\&. Returns true on success, false on failure\&. 
.SS "uint64_t Dwm::Ipv6Prefix::StreamedLength () const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Return the number of bytes that would be written if the object's Write(ostream &), Write(FILE *) or Write(int) member were called\&. These members would be inherited from \fBStreamWritable\fP, \fBFileWritable\fP or \fBDescriptorWritable\fP, respectively\&. 
.PP
Implements \fBDwm::StreamedLengthCapable\fP\&.
.SS "bool Dwm::Ipv6Prefix::Write (boost::asio::generic::stream_protocol::socket & s, boost::system::error_code & ec) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "bool Dwm::Ipv6Prefix::Write (boost::asio::ip::tcp::socket & s, boost::system::error_code & ec) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "bool Dwm::Ipv6Prefix::Write (boost::asio::local::stream_protocol::socket & s, boost::system::error_code & ec) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "size_t Dwm::Ipv6Prefix::Write (FILE * f) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to a FILE pointer\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileWritable\fP\&.
.SS "int Dwm::Ipv6Prefix::Write (gzFile gzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to a gzFile\&. 
.PP
Implements \fBDwm::GZWritable\fP\&.
.SS "ssize_t Dwm::Ipv6Prefix::Write (int fd) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to a file descriptor\&. 
.PP
Implements \fBDwm::DescriptorWritable\fP\&.
.SS "std::ostream & Dwm::Ipv6Prefix::Write (std::ostream & os) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to an ostream\&. Returns the ostream\&. 
.PP
Implements \fBDwm::StreamWritable\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
