.TH "Dwm::IOUtils" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::IOUtils \- This class contains a collection of static functions for calculating the streamed length of simple types when using \fBDescriptorIO\fP, \fBFileIO\fP and StreamedIO\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmIOUtils\&.hh>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (char c)"
.br
.RI "Returns the number of bytes that would be written if we called Write() for a char\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (uint8_t c)"
.br
.RI "Returns the number of bytes that would be written if we called Write() for a uint8_t\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (bool b)"
.br
.RI "Returns the number of bytes that would be written if we called Write() member for a bool\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (int16_t val)"
.br
.RI "Returns the number of bytes that would be written if we called Write() for an \fRint16_t\fP\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (uint16_t val)"
.br
.RI "Returns the number of bytes that would be written if we called Write() for a \fRuint16_t\fP\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (int32_t val)"
.br
.RI "Returns the number of bytes that would be written if we called Write() for an \fRint32_t\fP\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (uint32_t val)"
.br
.RI "Returns the number of bytes that would be written if we called Write() for a \fRuint32_t\fP\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (int64_t val)"
.br
.RI "Returns the number of bytes that would be written if we called Write() for an \fRint64_t\fP\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (uint64_t val)"
.br
.RI "Returns the number of bytes that would be written if we called Write() for a \fRuint64_t\fP\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (float val)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a float\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (double val)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a double\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (const std::string &s)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a string\&. "
.ti -1c
.RI "template<typename _firstT , typename _secondT > static uint64_t \fBStreamedLength\fP (const std::pair< _firstT, _secondT > &p)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a pair<_firstT, _secondT> "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::map< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a map<_keyT, _valueT> "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::multimap< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a multimap<_keyT, _valueT> "
.ti -1c
.RI "template<typename _valueT , size_t N> static uint64_t \fBStreamedLength\fP (const std::array< _valueT, N > &a)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for an array<_valueT,N> "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::vector< _valueT, _Alloc > &v)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a vector<_valueT> "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::deque< _valueT, _Alloc > &d)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a deque<_valueT> "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::list< _valueT, _Alloc > &l)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a list<_valueT> "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::set< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a set<_valueT> "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::multiset< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a multiset<_valueT> "
.ti -1c
.RI "template<typename T , typename\&.\&.\&. Args> static uint64_t \fBVarStreamedLength\fP (const T &t, Args\&.\&.\&. args)"
.br
.ti -1c
.RI "template<typename T , typename\&.\&.\&. Args> static uint64_t \fBStreamedLength\fP (const std::tuple< T, Args\&.\&.\&. > &t)"
.br
.RI "Returns the number of bytes that should be written if we call Write() for a tuple\&. "
.ti -1c
.RI "template<typename T > static uint64_t \fBTupleStreamedLength\fP (const T &t)"
.br
.RI "T must be a tuple\&. "
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (const std::monostate &sm)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. Ts> static uint64_t \fBStreamedLength\fP (const std::variant< Ts\&.\&.\&. > &v)"
.br
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::unordered_set< _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static uint64_t \fBStreamedLength\fP (const std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.ti -1c
.RI "static uint64_t \fBStreamedLength\fP (const \fBStreamedLengthCapable\fP &sl)"
.br
.ti -1c
.RI "template<typename\&.\&.\&. Args> static uint64_t \fBStreamedLengthV\fP (const Args &\&.\&.\&.args)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class contains a collection of static functions for calculating the streamed length of simple types when using \fBDescriptorIO\fP, \fBFileIO\fP and StreamedIO\&. 

It also contains functions for calculating the streamed length of strings, deques, lists, vectors, maps, multimaps, sets, multisets, unordered_maps, unordered_multimaps, unordered_sets, unordered_multisets, tuples and variants\&. We use our member functions to handle simple types in the containers, and function templates to handle other class types\&. User-defined classes must implement the \fBStreamedLengthCapable\fP interface, since the function templates simply call out to it\&. 
.SH "Member Function Documentation"
.PP 
.SS "static uint64_t Dwm::IOUtils::StreamedLength (char c)\fR [inline]\fP, \fR [static]\fP"

.PP
Returns the number of bytes that would be written if we called Write() for a char\&. Should always be 1\&. 
.SS "static uint64_t Dwm::IOUtils::StreamedLength (uint8_t c)\fR [inline]\fP, \fR [static]\fP"

.PP
Returns the number of bytes that would be written if we called Write() for a uint8_t\&. Should always be 1\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
