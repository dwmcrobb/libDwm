.TH "Dwm::Ipv6AddrMap< T, Hash >" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::Ipv6AddrMap< T, Hash > \- A thin wrapper around std::unordered_map<Ipv6Address,T,Hash>\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmIpv6AddrMap\&.hh>\fP
.PP
Inherits \fBDwm::StreamIOCapable\fP, Dwm::FileIOCapable, \fBDwm::DescriptorIOCapable\fP, \fBDwm::StreamedLengthCapable\fP, \fBDwm::GZIOCapable\fP, \fBDwm::BZ2IOCapable\fP, and \fBDwm::ASIOCapable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBAdd\fP (const \fBIpv6Address\fP &addr, const T &value)"
.br
.ti -1c
.RI "void \fBAdd\fP (std::unique_lock< std::shared_mutex > &lck, const \fBIpv6Address\fP &addr, const T &value)"
.br
.ti -1c
.RI "bool \fBFind\fP (const \fBIpv6Address\fP &addr, T &value) const"
.br
.ti -1c
.RI "bool \fBFind\fP (std::shared_lock< std::shared_mutex > &lck, const \fBIpv6Address\fP &addr, T &value) const"
.br
.ti -1c
.RI "bool \fBFind\fP (std::unique_lock< std::shared_mutex > &lck, const \fBIpv6Address\fP &addr, T &value) const"
.br
.ti -1c
.RI "bool \fBRemove\fP (const \fBIpv6Address\fP &addr)"
.br
.ti -1c
.RI "bool \fBRemove\fP (std::unique_lock< std::shared_mutex > &lck, const \fBIpv6Address\fP &addr)"
.br
.ti -1c
.RI "bool \fBEmpty\fP () const"
.br
.ti -1c
.RI "bool \fBEmpty\fP (std::shared_lock< std::shared_mutex > &lck) const"
.br
.ti -1c
.RI "bool \fBEmpty\fP (std::unique_lock< std::shared_mutex > &lck) const"
.br
.ti -1c
.RI "void \fBClear\fP ()"
.br
.ti -1c
.RI "void \fBClear\fP (std::unique_lock< std::shared_mutex > &lck)"
.br
.ti -1c
.RI "std::istream & \fBRead\fP (std::istream &is) override"
.br
.RI "Reads the \fBIpv6AddrMap\fP from an istream\&. Returns the istream\&. "
.ti -1c
.RI "std::ostream & \fBWrite\fP (std::ostream &os) const override"
.br
.RI "Writes the \fBIpv6AddrMap\fP to an ostream\&. Returns the ostream\&. "
.ti -1c
.RI "size_t \fBRead\fP (FILE *f) override"
.br
.RI "Reads the \fBIpv6AddrMap\fP from \fRf\fP\&. "
.ti -1c
.RI "size_t \fBWrite\fP (FILE *f) const override"
.br
.RI "Writes the \fBIpv6AddrMap\fP to \fRf\fP\&. "
.ti -1c
.RI "ssize_t \fBRead\fP (int fd) override"
.br
.RI "Reads the \fBIpv6AddrMap\fP from file descriptor \fRfd\fP\&. "
.ti -1c
.RI "ssize_t \fBWrite\fP (int fd) const override"
.br
.RI "Writes the \fBIpv6AddrMap\fP to file descriptor \fRfd\fP\&. "
.ti -1c
.RI "int \fBRead\fP (gzFile gzf) override"
.br
.RI "Reads the \fBIpv6AddrMap\fP from \fRgzf\fP\&. "
.ti -1c
.RI "int \fBWrite\fP (gzFile gzf) const override"
.br
.RI "Writes the \fBIpv6AddrMap\fP to \fRgzf\fP\&. "
.ti -1c
.RI "int \fBBZRead\fP (BZFILE *bzf) override"
.br
.RI "Reads the \fBIpv6AddrMap\fP from \fRbzf\fP\&. "
.ti -1c
.RI "int \fBBZWrite\fP (BZFILE *bzf) const override"
.br
.RI "Writes the \fBIpv6AddrMap\fP to \fRbzf\fP\&. "
.ti -1c
.RI "uint64_t \fBStreamedLength\fP () const override"
.br
.RI "Returns the number of bytes that would be written if the \fBIpv6AddrMap\fP was written to a FILE, file descriptor or ostream\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::ip::tcp::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the \fBIpv6AddrMap\fP from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::ip::tcp::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the \fBIpv6AddrMap\fP to \fRs\fP\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::local::stream_protocol::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the \fBIpv6AddrMap\fP from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::local::stream_protocol::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the \fBIpv6AddrMap\fP to \fRs\fP\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::generic::stream_protocol::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the \fBIpv6AddrMap\fP from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::generic::stream_protocol::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the \fBIpv6AddrMap\fP to \fRs\fP\&. "
.ti -1c
.RI "std::shared_lock< std::shared_mutex > \fBSharedLock\fP () const"
.br
.ti -1c
.RI "std::unique_lock< std::shared_mutex > \fBUniqueLock\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBDwm::StreamReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::StreamWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::GZReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::GZWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZWritable\fP ()"
.br
.RI "destructor "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T, typename Hash = OurIpv6AddressHash>
.br
class Dwm::Ipv6AddrMap< T, Hash >"A thin wrapper around std::unordered_map<Ipv6Address,T,Hash>\&. 

Mainly provides thread safety (shared and unique locks)\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> int \fBDwm::Ipv6AddrMap\fP< T, Hash >::BZRead (BZFILE * bzf)\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the \fBIpv6AddrMap\fP from \fRbzf\fP\&. Returns the number of bytes read on success, -1 on failure\&. Be wary; the integer return is risky (could overflow) but it's what bzlib's BZ2_bzRead() returns and we trickled up the return type\&. 
.PP
Implements \fBDwm::BZ2Readable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> int \fBDwm::Ipv6AddrMap\fP< T, Hash >::BZWrite (BZFILE * bzf) const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the \fBIpv6AddrMap\fP to \fRbzf\fP\&. Returns the number of bytes written on success, -1 on failure\&. Be wary; the integer return is risky (could overflow) but it's what bzlib's BZ2_bzWrite() returns and we trickled up the return type\&. 
.PP
Implements \fBDwm::BZ2Writable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> bool \fBDwm::Ipv6AddrMap\fP< T, Hash >::Read (boost::asio::generic::stream_protocol::socket & s, boost::system::error_code & ec)\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the \fBIpv6AddrMap\fP from \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> bool \fBDwm::Ipv6AddrMap\fP< T, Hash >::Read (boost::asio::ip::tcp::socket & s, boost::system::error_code & ec)\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the \fBIpv6AddrMap\fP from \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> bool \fBDwm::Ipv6AddrMap\fP< T, Hash >::Read (boost::asio::local::stream_protocol::socket & s, boost::system::error_code & ec)\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the \fBIpv6AddrMap\fP from \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> size_t \fBDwm::Ipv6AddrMap\fP< T, Hash >::Read (FILE * f)\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the \fBIpv6AddrMap\fP from \fRf\fP\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileReadable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> int \fBDwm::Ipv6AddrMap\fP< T, Hash >::Read (gzFile gzf)\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the \fBIpv6AddrMap\fP from \fRgzf\fP\&. Returns the number of bytes read on success, -1 on failure\&. Be wary; the integer return is risky (could overflow) but it's what zlib's gzread() returns and we trickled up the return type\&. 
.PP
Implements \fBDwm::GZReadable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> ssize_t \fBDwm::Ipv6AddrMap\fP< T, Hash >::Read (int fd)\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the \fBIpv6AddrMap\fP from file descriptor \fRfd\fP\&. Returns the number of bytes read on success, -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorReadable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> std::istream & \fBDwm::Ipv6AddrMap\fP< T, Hash >::Read (std::istream & is)\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the \fBIpv6AddrMap\fP from an istream\&. Returns the istream\&. 
.PP
Implements \fBDwm::StreamReadable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> uint64_t \fBDwm::Ipv6AddrMap\fP< T, Hash >::StreamedLength () const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Returns the number of bytes that would be written if the \fBIpv6AddrMap\fP was written to a FILE, file descriptor or ostream\&. 
.PP
Implements \fBDwm::StreamedLengthCapable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> bool \fBDwm::Ipv6AddrMap\fP< T, Hash >::Write (boost::asio::generic::stream_protocol::socket & s, boost::system::error_code & ec) const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the \fBIpv6AddrMap\fP to \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> bool \fBDwm::Ipv6AddrMap\fP< T, Hash >::Write (boost::asio::ip::tcp::socket & s, boost::system::error_code & ec) const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the \fBIpv6AddrMap\fP to \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> bool \fBDwm::Ipv6AddrMap\fP< T, Hash >::Write (boost::asio::local::stream_protocol::socket & s, boost::system::error_code & ec) const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the \fBIpv6AddrMap\fP to \fRs\fP\&. Returns true on success, false on failure\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> size_t \fBDwm::Ipv6AddrMap\fP< T, Hash >::Write (FILE * f) const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the \fBIpv6AddrMap\fP to \fRf\fP\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileWritable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> int \fBDwm::Ipv6AddrMap\fP< T, Hash >::Write (gzFile gzf) const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the \fBIpv6AddrMap\fP to \fRgzf\fP\&. Returns the number of bytes written on success, -1 on failure\&. Be wary; the integer return is risky (could overflow) but it's what zlib's gzwrite() returns and we trickled up the return type\&. 
.PP
Implements \fBDwm::GZWritable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> ssize_t \fBDwm::Ipv6AddrMap\fP< T, Hash >::Write (int fd) const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the \fBIpv6AddrMap\fP to file descriptor \fRfd\fP\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorWritable\fP\&.
.SS "template<typename T , typename Hash  = OurIpv6AddressHash> std::ostream & \fBDwm::Ipv6AddrMap\fP< T, Hash >::Write (std::ostream & os) const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the \fBIpv6AddrMap\fP to an ostream\&. Returns the ostream\&. 
.PP
Implements \fBDwm::StreamWritable\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
