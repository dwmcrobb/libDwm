.TH "Dwm::Ipv4PacketHeader" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::Ipv4PacketHeader \- Encapsulates an IPv4 packet header\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmIpv4PacketHeader\&.hh>\fP
.PP
Inherits \fBDwm::DescriptorIOCapable\fP, Dwm::FileIOCapable, \fBDwm::StreamIOCapable\fP, \fBDwm::StreamedLengthCapable\fP, \fBDwm::GZIOCapable\fP, and \fBDwm::BZ2IOCapable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIpv4PacketHeader\fP ()"
.br
.RI "Constructor\&. The new object will own the underlying memory\&. "
.ti -1c
.RI "\fBIpv4PacketHeader\fP (const \fBIpv4PacketHeader\fP &ipHeader)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBIpv4PacketHeader\fP (const struct ip &ip)"
.br
.RI "Construct from a struct ip\&. "
.ti -1c
.RI "\fBIpv4PacketHeader\fP (struct ip *ip)"
.br
.RI "Construct from a pointer to a struct ip\&. "
.ti -1c
.RI "\fB~Ipv4PacketHeader\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBIpv4PacketHeader\fP & \fBoperator=\fP (const \fBIpv4PacketHeader\fP &ipHeader)"
.br
.RI "operator = "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBIpv4PacketHeader\fP &ipHeader) const"
.br
.RI "operator == "
.ti -1c
.RI "void \fBSet\fP (const struct ip &ip)"
.br
.RI "Copy the contents of \fRip\fP into the object\&. "
.ti -1c
.RI "uint8_t \fBHeaderLength\fP () const"
.br
.RI "Returns the IP header length\&. "
.ti -1c
.RI "uint8_t \fBHeaderLength\fP (uint8_t headerLength)"
.br
.RI "Sets and returns the IP header length\&. "
.ti -1c
.RI "uint8_t \fBTypeOfService\fP () const"
.br
.RI "Returns the type-of-service\&. "
.ti -1c
.RI "uint8_t \fBTypeOfService\fP (uint8_t typeOfService)"
.br
.RI "Sets and returns the type-of-service\&. "
.ti -1c
.RI "uint16_t \fBTotalLength\fP () const"
.br
.RI "Returns the total length field in host byte order\&. "
.ti -1c
.RI "uint16_t \fBTotalLength\fP (uint16_t totalLength)"
.br
.RI "Sets and returns total length field in host byte order\&. "
.ti -1c
.RI "uint16_t \fBId\fP () const"
.br
.RI "Returns the IP ID field in host byte order\&. "
.ti -1c
.RI "uint16_t \fBId\fP (uint16_t id)"
.br
.RI "Sets and returns the IP ID field in host byte order\&. "
.ti -1c
.RI "uint16_t \fBFragmentOffset\fP () const"
.br
.RI "Returns the fragment offset field in host byte order\&. "
.ti -1c
.RI "uint16_t \fBFragmentOffset\fP (uint16_t fragmentOffset)"
.br
.RI "Sets and returns the fragment offset field in host byte order\&. "
.ti -1c
.RI "uint8_t \fBTimeToLive\fP () const"
.br
.RI "Returns the time-to-live field\&. "
.ti -1c
.RI "uint8_t \fBTimeToLive\fP (uint8_t timeToLive)"
.br
.RI "Sets and returns the time-to-live field\&. "
.ti -1c
.RI "uint8_t \fBProtocol\fP () const"
.br
.RI "Returns the protocol field\&. "
.ti -1c
.RI "uint8_t \fBProtocol\fP (uint8_t protocol)"
.br
.RI "Sets and returns the protocol field\&. "
.ti -1c
.RI "uint16_t \fBChecksum\fP () const"
.br
.RI "Returns the checksum field in host byte order\&. "
.ti -1c
.RI "\fBIpv4Address\fP \fBSourceAddress\fP () const"
.br
.RI "Returns the source IP address\&. "
.ti -1c
.RI "\fBIpv4Address\fP \fBSourceAddress\fP (const \fBIpv4Address\fP &sourceAddress)"
.br
.RI "Sets and returns the source IP address\&. "
.ti -1c
.RI "\fBIpv4Address\fP \fBDestinationAddress\fP () const"
.br
.RI "Returns the destination IP address\&. "
.ti -1c
.RI "\fBIpv4Address\fP \fBDestinationAddress\fP (const \fBIpv4Address\fP &destinationAddress)"
.br
.RI "Sets and returns the destination IP address\&. "
.ti -1c
.RI "void \fBSetChecksum\fP ()"
.br
.RI "Computes and stores the IP header checksum\&. "
.ti -1c
.RI "std::istream & \fBRead\fP (std::istream &is) override"
.br
.RI "Reads the header from an istream\&. Returns the istream\&. "
.ti -1c
.RI "std::ostream & \fBWrite\fP (std::ostream &os) const override"
.br
.RI "Writes the header to an ostream\&. Returns the ostream\&. "
.ti -1c
.RI "ssize_t \fBRead\fP (int fd) override"
.br
.RI "Reads the header from a file descriptor\&. "
.ti -1c
.RI "ssize_t \fBWrite\fP (int fd) const override"
.br
.RI "Writes the header to a file descriptor\&. "
.ti -1c
.RI "size_t \fBRead\fP (FILE *f) override"
.br
.RI "Reads the header from a FILE\&. Returns 1 on success, 0 on failure\&. "
.ti -1c
.RI "size_t \fBWrite\fP (FILE *f) const override"
.br
.RI "Writes the header to a FILE\&. Returns 1 on success, 0 on failure\&. "
.ti -1c
.RI "uint64_t \fBStreamedLength\fP () const override"
.br
.RI "Returns the number of bytes that should be written if we called one of the \fBWrite()\fP members\&. "
.ti -1c
.RI "int \fBRead\fP (gzFile gzf) override"
.br
.RI "Reads the header from a gzFile\&. "
.ti -1c
.RI "int \fBWrite\fP (gzFile gzf) const override"
.br
.RI "Writes the header to a gzFile\&. "
.ti -1c
.RI "int \fBBZRead\fP (BZFILE *bzf) override"
.br
.RI "Reads the header from a BZFILE\&. "
.ti -1c
.RI "int \fBBZWrite\fP (BZFILE *bzf) const override"
.br
.RI "Writes the header to a BZFILE\&. "
.ti -1c
.RI "std::ostream & \fBPrintXML\fP (std::ostream &os, const std::string &pre='') const"
.br
.RI "Prints the header is pseudo-XML\&. "
.ti -1c
.RI "uint8_t * \fBEnd\fP () const"
.br
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::StreamReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::StreamWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::GZReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::GZWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZWritable\fP ()"
.br
.RI "destructor "
.in -1c
.SH "Detailed Description"
.PP 
Encapsulates an IPv4 packet header\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Dwm::Ipv4PacketHeader::Ipv4PacketHeader (const struct ip & ip)"

.PP
Construct from a struct ip\&. The new object will own the underlying memory\&. 
.SS "Dwm::Ipv4PacketHeader::Ipv4PacketHeader (struct ip * ip)"

.PP
Construct from a pointer to a struct ip\&. The caller will still own the memory at \fRip\fP, and \fRip\fP must remain unfreed while the new \fBIpv4PacketHeader\fP object is in use\&. 
.SS "Dwm::Ipv4PacketHeader::~Ipv4PacketHeader ()"

.PP
Destructor\&. If the underlying memory is owned by the object, it will be freed\&. 
.SH "Member Function Documentation"
.PP 
.SS "int Dwm::Ipv4PacketHeader::BZRead (BZFILE * bzf)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the header from a BZFILE\&. Returns the number of bytes read on success, -1 on failure\&. 
.PP
Implements \fBDwm::BZ2Readable\fP\&.
.SS "int Dwm::Ipv4PacketHeader::BZWrite (BZFILE * bzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the header to a BZFILE\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::BZ2Writable\fP\&.
.SS "std::ostream & Dwm::Ipv4PacketHeader::PrintXML (std::ostream & os, const std::string & pre = \fR''\fP) const"

.PP
Prints the header is pseudo-XML\&. Each line will be prefixed by \fRpre\fP\&. 
.SS "size_t Dwm::Ipv4PacketHeader::Read (FILE * f)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the header from a FILE\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileReadable\fP\&.
.SS "int Dwm::Ipv4PacketHeader::Read (gzFile gzf)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the header from a gzFile\&. Returns the number of bytes read on success, -1 on failure\&. 
.PP
Implements \fBDwm::GZReadable\fP\&.
.SS "ssize_t Dwm::Ipv4PacketHeader::Read (int fd)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the header from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorReadable\fP\&.
.SS "std::istream & Dwm::Ipv4PacketHeader::Read (std::istream & is)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the header from an istream\&. Returns the istream\&. 
.PP
Implements \fBDwm::StreamReadable\fP\&.
.SS "uint64_t Dwm::Ipv4PacketHeader::StreamedLength () const\fR [override]\fP, \fR [virtual]\fP"

.PP
Returns the number of bytes that should be written if we called one of the \fBWrite()\fP members\&. 
.PP
Implements \fBDwm::StreamedLengthCapable\fP\&.
.SS "size_t Dwm::Ipv4PacketHeader::Write (FILE * f) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the header to a FILE\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileWritable\fP\&.
.SS "int Dwm::Ipv4PacketHeader::Write (gzFile gzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the header to a gzFile\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::GZWritable\fP\&.
.SS "ssize_t Dwm::Ipv4PacketHeader::Write (int fd) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the header to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorWritable\fP\&.
.SS "std::ostream & Dwm::Ipv4PacketHeader::Write (std::ostream & os) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the header to an ostream\&. Returns the ostream\&. 
.PP
Implements \fBDwm::StreamWritable\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
