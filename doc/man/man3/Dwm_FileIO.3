.TH "Dwm::FileIO" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::FileIO \- This class contains a collection of static functions for reading and writing simple types, in network byte order (MSB first)\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmFileIO\&.hh>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, char &c)"
.br
.RI "Reads \fRc\fP from \fRf\fP\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, char c)"
.br
.RI "Writes \fRc\fP to \fRf\fP\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, uint8_t &c)"
.br
.RI "Reads \fRc\fP from \fRf\fP\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, uint8_t c)"
.br
.RI "Writes \fRc\fP to \fRf\fP\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, bool &b)"
.br
.RI "Reads \fRb\fP from \fRf\fP\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, bool b)"
.br
.RI "Writes \fRb\fP to \fRf\fP\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, int16_t &val)"
.br
.RI "Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, int16_t val)"
.br
.RI "Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, uint16_t &val)"
.br
.RI "Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, uint16_t val)"
.br
.RI "Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, int32_t &val)"
.br
.RI "Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, int32_t val)"
.br
.RI "Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, uint32_t &val)"
.br
.RI "Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, uint32_t val)"
.br
.RI "Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, int64_t &val)"
.br
.RI "Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, const int64_t &val)"
.br
.RI "Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, uint64_t &val)"
.br
.RI "Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, const uint64_t &val)"
.br
.RI "Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, float &val)"
.br
.RI "Reads \fRval\fP from \fRf\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, float val)"
.br
.RI "Writes \fRval\fP to \fRf\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, double &val)"
.br
.RI "Reads \fRval\fP from \fRf\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, const double &val)"
.br
.RI "Writes \fRval\fP to \fRf\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, std::string &s)"
.br
.RI "Reads \fRs\fP from \fRf\fP\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, const std::string &s)"
.br
.RI "Writes \fRs\fP to \fRf\fP\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *f, \fBFileReadable\fP &val)"
.br
.RI "Wrapper function to read a \fBFileReadable\fP object from a FILE\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *f, const \fBFileWritable\fP &val)"
.br
.RI "Wrapper function to write a \fBFileWritable\fP object to a FILE\&. "
.ti -1c
.RI "template<typename _firstT , typename _secondT > static size_t \fBRead\fP (FILE *f, std::pair< _firstT, _secondT > &p)"
.br
.RI "Reads a pair<_firstT,_secondT> from a FILE\&. "
.ti -1c
.RI "template<typename _firstT , typename _secondT > static size_t \fBWrite\fP (FILE *f, const std::pair< _firstT, _secondT > &p)"
.br
.RI "Writes a pair<_firstT,_secondT> to a FILE\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::map< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Reads a map<_keyT,_valueT> from a FILE\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::map< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Writes a map<_keyT,_valueT> to a FILE\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::multimap< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Reads a multimap<_keyT,_valueT> from a FILE\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::multimap< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Writes a multimap<_keyT,_valueT> to a FILE\&. "
.ti -1c
.RI "template<typename _valueT , size_t N> static size_t \fBRead\fP (FILE *f, std::array< _valueT, N > &a)"
.br
.RI "Reads an array<_valueT,N> from a FILE\&. "
.ti -1c
.RI "template<typename _valueT , size_t N> static size_t \fBWrite\fP (FILE *f, const std::array< _valueT, N > &a)"
.br
.RI "Writes an array<_valueT,N> to a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::vector< _valueT, _Alloc > &v)"
.br
.RI "Reads a vector<_valueT> from a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::vector< _valueT, _Alloc > &v)"
.br
.RI "Writes a vector<_valueT> to a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::deque< _valueT, _Alloc > &d)"
.br
.RI "Reads a deque<_valueT> from a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::deque< _valueT, _Alloc > &d)"
.br
.RI "Writes a deque<_valueT> to a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::list< _valueT, _Alloc > &l)"
.br
.RI "Reads a list<_valueT> from a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::list< _valueT, _Alloc > &l)"
.br
.RI "Writes a list<_valueT> to a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::set< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Reads a set<_valueT> from a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::set< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Writes a set<_valueT> to a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::multiset< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Reads a multiset<_valueT> from a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::multiset< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Writes a multiset<_valueT> to a FILE\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Args> static size_t \fBRead\fP (FILE *f, std::tuple< Args\&.\&.\&. > &t)"
.br
.RI "Reads a tuple from a FILE\&. Returns 1 on success, 0 on failure\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Args> static size_t \fBWrite\fP (FILE *f, const std::tuple< Args\&.\&.\&. > &t)"
.br
.RI "Writes a tuple to a FILE\&. Returns 1 on success, 0 on failure\&. "
.ti -1c
.RI "static size_t \fBRead\fP (FILE *fp, std::monostate &sm)"
.br
.RI "Just a dummy helper function for std::variant instances that hold a std::monostate\&. "
.ti -1c
.RI "static size_t \fBWrite\fP (FILE *fp, const std::monostate &sm)"
.br
.RI "Just a dummy helper function for std::variant instances that hold a std::monostate\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Ts> static size_t \fBRead\fP (FILE *fp, std::variant< Ts\&.\&.\&. > &v)"
.br
.RI "Reads a variant from a FILE\&. Returns 1 on success, 0 on failure\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Ts> static size_t \fBWrite\fP (FILE *fp, const std::variant< Ts\&.\&.\&. > &v)"
.br
.RI "Writes a variant to a FILE\&. Returns 1 on success, 0 on failure\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > &hm)"
.br
.RI "Reads an unordered_map from a FILE\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > &hm)"
.br
.RI "Writes an unordered_map to a FILE\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > &hm)"
.br
.RI "Reads an unordered_multimap from a FILE\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > &hm)"
.br
.RI "Writes an unordered_multimap to a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::unordered_set< _valueT, _Hash, _Pred, _Alloc > &hm)"
.br
.RI "Reads an unordered_set from a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::unordered_set< _valueT, _Hash, _Pred, _Alloc > &hm)"
.br
.RI "Writes an unordered_set to a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t \fBRead\fP (FILE *f, std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > &hm)"
.br
.RI "Reads an unordered_multiset from a FILE\&. "
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t \fBWrite\fP (FILE *f, const std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > &hm)"
.br
.RI "Writes an unordered_multiset to a FILE\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Args> static size_t \fBReadV\fP (FILE *f, Args &\&.\&.\&.args)"
.br
.RI "Reads multiple objects from a FILE\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Args> static size_t \fBWriteV\fP (FILE *f, const Args &\&.\&.\&.args)"
.br
.RI "Writes multiple objects to a FILE\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class contains a collection of static functions for reading and writing simple types, in network byte order (MSB first)\&. 

It also contains functions to read and write strings\&. It also contains function templates to read and write STL deques, lists, vectors, maps, multimaps, sets, multisets, unordered_maps, unordered_multimaps, unordered_sets, unordered_multisets, tuples and variants\&. We use our member functions to handle reading and writing simple types in the containers, and function templates to handle reading and writing other class types\&. For a user-defined class, the class must implement the \fBFileReadable\fP and \fBFileWritable\fP interfaces, since our function templates simply call out to them\&. Since templates are static polymorphism, you don't need to inherit from \fBFileReadable\fP and \fBFileWritable\fP, but you must implement the interfaces\&. 
.SH "Member Function Documentation"
.PP 
.SS "static size_t Dwm::FileIO::Read (FILE * f, bool & b)\fR [static]\fP"

.PP
Reads \fRb\fP from \fRf\fP\&. Returns the number of bytes read (1 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, char & c)\fR [static]\fP"

.PP
Reads \fRc\fP from \fRf\fP\&. Returns the number of bytes read (1 on success, 0 on failure)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, double & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRf\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. Returns the number of bytes read (8 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, float & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRf\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. Returns the number of bytes read (4 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, int16_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes read (2 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, int32_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes read (4 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, int64_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes read (8 on success)\&. 
.SS "template<typename _valueT , size_t N> static size_t Dwm::FileIO::Read (FILE * f, std::array< _valueT, N > & a)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an array<_valueT,N> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::deque< _valueT, _Alloc > & d)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a deque<_valueT> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::list< _valueT, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a list<_valueT> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::map< _keyT, _valueT, _Compare, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a map<_keyT,_valueT> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::multimap< _keyT, _valueT, _Compare, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a multimap<_keyT,_valueT> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Compare , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::multiset< _valueT, _Compare, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a multiset<_valueT> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _firstT , typename _secondT > static size_t Dwm::FileIO::Read (FILE * f, std::pair< _firstT, _secondT > & p)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a pair<_firstT,_secondT> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Compare , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::set< _valueT, _Compare, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a set<_valueT> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, std::string & s)\fR [static]\fP"

.PP
Reads \fRs\fP from \fRf\fP\&. Since we write strings with a 64-bit length value preceding, and always write the terminating NULL, this function will always return a value of 9 or greater on success\&. 
.SS "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > & hm)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an unordered_map from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > & hm)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an unordered_multimap from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > & hm)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an unordered_multiset from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::unordered_set< _valueT, _Hash, _Pred, _Alloc > & hm)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an unordered_set from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static size_t Dwm::FileIO::Read (FILE * f, std::vector< _valueT, _Alloc > & v)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a vector<_valueT> from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, uint16_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes read (2 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, uint32_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes read (4 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, uint64_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes read (8 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * f, uint8_t & c)\fR [static]\fP"

.PP
Reads \fRc\fP from \fRf\fP\&. Returns the number of bytes read (1 on success)\&. 
.SS "static size_t Dwm::FileIO::Read (FILE * fp, std::monostate & sm)\fR [inline]\fP, \fR [static]\fP"

.PP
Just a dummy helper function for std::variant instances that hold a std::monostate\&. This should only be called from our \fBRead()\fP for std::variant (via std::visit()), and does nothing\&. Returns 1\&. 
.SS "template<typename\&.\&.\&. Args> static size_t Dwm::FileIO::ReadV (FILE * f, Args &\&.\&.\&. args)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads multiple objects from a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, bool b)\fR [static]\fP"

.PP
Writes \fRb\fP to \fRf\fP\&. Returns the number of bytes written (1) on success\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, char c)\fR [static]\fP"

.PP
Writes \fRc\fP to \fRf\fP\&. Returns the number of bytes written (1) on success\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, const double & val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRf\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. Returns the number of bytes written (8 on success)\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, const int64_t & val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes written (8) on success\&. 
.SS "template<typename _valueT , size_t N> static size_t Dwm::FileIO::Write (FILE * f, const std::array< _valueT, N > & a)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an array<_valueT,N> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::deque< _valueT, _Alloc > & d)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a deque<_valueT> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::list< _valueT, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a list<_valueT> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::map< _keyT, _valueT, _Compare, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a map<_keyT,_valueT> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::multimap< _keyT, _valueT, _Compare, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a multimap<_keyT,_valueT> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Compare , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::multiset< _valueT, _Compare, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a multiset<_valueT> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _firstT , typename _secondT > static size_t Dwm::FileIO::Write (FILE * f, const std::pair< _firstT, _secondT > & p)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a pair<_firstT,_secondT> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Compare , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::set< _valueT, _Compare, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a set<_valueT> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, const std::string & s)\fR [static]\fP"

.PP
Writes \fRs\fP to \fRf\fP\&. Returns the number of bytes written\&. Note that we first write a 64-bit length value, then the string itself (with terminating NULL)\&. Hence a successful write will always return a value of 8 + \fRs\&.length()\fP + 1\&. 
.SS "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > & hm)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an unordered_map to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > & hm)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an unordered_multimap to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > & hm)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an unordered_multiset to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::unordered_set< _valueT, _Hash, _Pred, _Alloc > & hm)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an unordered_set to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static size_t Dwm::FileIO::Write (FILE * f, const std::vector< _valueT, _Alloc > & v)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a vector<_valueT> to a FILE\&. Returns 1 on success, 0 on failure\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, const uint64_t & val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes written (8) on success\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, float val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRf\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. Returns the number of bytes written (4 on success)\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, int16_t val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes written (2) on success\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, int32_t val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes written (4) on success\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, uint16_t val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes written (2) on success\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, uint32_t val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRf\fP, in network byte order (MSB first)\&. Returns the number of bytes written (4) on success\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * f, uint8_t c)\fR [static]\fP"

.PP
Writes \fRc\fP to \fRf\fP\&. Returns the number of bytes written (1) on success\&. 
.SS "static size_t Dwm::FileIO::Write (FILE * fp, const std::monostate & sm)\fR [inline]\fP, \fR [static]\fP"

.PP
Just a dummy helper function for std::variant instances that hold a std::monostate\&. This should only be called from our \fBWrite()\fP for std::variant (via std::visit()), and does nothing\&. Returns 1\&. 
.SS "template<typename\&.\&.\&. Args> static size_t Dwm::FileIO::WriteV (FILE * f, const Args &\&.\&.\&. args)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes multiple objects to a FILE\&. Returns 1 on success, 0 on failure\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
