.TH "Dwm::Pcap" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::Pcap \- This is a pcap wrapper/utility class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmPcap\&.hh>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPcap\fP ()"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fB~Pcap\fP ()"
.br
.RI "Destructor\&. Will close the contained pcap device if it's open\&. "
.ti -1c
.RI "int \fBSetBufferSize\fP (int bufferSize)"
.br
.ti -1c
.RI "bool \fBOpenLive\fP (const std::string &device, int snaplen, bool promisc, int timeout_msecs)"
.br
.RI "Open \fRdevice\fP for live packet capture\&. "
.ti -1c
.RI "bool \fBSetDirection\fP (pcap_direction_t direction)"
.br
.RI "Specify whether to capture incoming packets, outgoing packets, or both\&. "
.ti -1c
.RI "bool \fBOpenOffline\fP (const std::string &fname)"
.br
.RI "Opens the file \fRfname\fP for reading\&. "
.ti -1c
.RI "bool \fBSetFilter\fP (const std::string &filter, bool optimize)"
.br
.RI "Sets the filter for the capture device\&. "
.ti -1c
.RI "int \fBDispatch\fP (int count, pcap_handler callback, uint8_t *user)"
.br
.RI "A wrapper for pcap_dispatch()\&. See the pcap(3) manpage\&. "
.ti -1c
.RI "int \fBLoop\fP (int count, pcap_handler callback, uint8_t *user)"
.br
.RI "A wrapper for pcap_loop()\&. See the pcap(3) manpage\&. "
.ti -1c
.RI "void \fBBreakLoop\fP ()"
.br
.RI "A wrapper for pcap_breakloop()\&. "
.ti -1c
.RI "bool \fBClose\fP ()"
.br
.RI "Closes the capture device\&. "
.ti -1c
.RI "const std::string & \fBLastError\fP () const"
.br
.RI "Returns the last error string from a failed \fBOpenLive()\fP or \fBOpenOffline()\fP call\&. "
.ti -1c
.RI "int \fBDataLinkOffset\fP () const"
.br
.RI "Returns the length of the link layer header for the capture device\&. "
.in -1c
.SH "Detailed Description"
.PP 
This is a pcap wrapper/utility class\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool Dwm::Pcap::Close ()"

.PP
Closes the capture device\&. Returns true if the device was open, false if it was already closed\&. 
.SS "int Dwm::Pcap::DataLinkOffset () const"

.PP
Returns the length of the link layer header for the capture device\&. This lets us skip over it to get to the network layer\&. Returns -1 if we don't know the length of the link layer header\&. 
.SS "bool Dwm::Pcap::OpenLive (const std::string & device, int snaplen, bool promisc, int timeout_msecs)"

.PP
Open \fRdevice\fP for live packet capture\&. Will capture no more than \fRsnaplen\fP from each packet\&. Will set the device in promiscuous mode if \fRpromisc\fP is true\&. \fRtimeout_msecs\fP specifies the read timeout in milliseconds\&. See the pcap(3) manpage for details\&. Returns true on success, false on failure\&. 
.SS "bool Dwm::Pcap::OpenOffline (const std::string & fname)"

.PP
Opens the file \fRfname\fP for reading\&. Returns true on success, false on failure\&. 
.SS "bool Dwm::Pcap::SetDirection (pcap_direction_t direction)"

.PP
Specify whether to capture incoming packets, outgoing packets, or both\&. See the pcap(3) manpage for details\&. Returns true on success, false on failure\&. Note this function is only supported for live packet captures\&. 
.SS "bool Dwm::Pcap::SetFilter (const std::string & filter, bool optimize)"

.PP
Sets the filter for the capture device\&. \fRfilter\fP is the usual pcap filter string syntax\&. If \fRoptimize\fP is true, the resulting compiled filter will be optimized\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
