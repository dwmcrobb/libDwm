.TH "Dwm::Ipv4Prefix" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::Ipv4Prefix \- This class encapsulates an IPv4 address and netmask\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmIpv4Prefix\&.hh>\fP
.PP
Inherits \fBDwm::ASIOCapable\fP, \fBDwm::StreamIOCapable\fP, Dwm::FileIOCapable, \fBDwm::DescriptorIOCapable\fP, \fBDwm::StreamedLengthCapable\fP, \fBDwm::GZIOCapable\fP, and \fBDwm::BZ2IOCapable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIpv4Prefix\fP ()"
.br
.RI "Constructor\&. Initializes the prefix to 255\&.255\&.255\&.255/32\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP (const \fBIpv4Address\fP &network, uint8_t maskLength)"
.br
.RI "Constructor accepting an IP address and a netmask length\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP (const \fBIpv4Address\fP &network, const \fBIpv4Address\fP &netmask)"
.br
.RI "Construct from an IP address and netmask\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP (const std::string &prefix)"
.br
.RI "Construct from a string of the form a\&.b\&.c\&.d/n\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP (const \fBIpv4Address\fP &addr)"
.br
.RI "Construct from an \fBIpv4Address\fP\&. Sets the netmask to 255\&.255\&.255\&.255\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP (const \fBIpv4Prefix\fP &prefix)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP & \fBoperator=\fP (const \fBIpv4Prefix\fP &prefix)"
.br
.RI "operator = "
.ti -1c
.RI "virtual \fB~Ipv4Prefix\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBIpv4Address\fP \fBNetwork\fP () const"
.br
.RI "Returns the network portion of the prefix\&. "
.ti -1c
.RI "ipv4addr_t \fBNetworkRaw\fP () const"
.br
.ti -1c
.RI "\fBIpv4Address\fP \fBNetmask\fP () const"
.br
.RI "Returns the netmask portion of the prefix\&. "
.ti -1c
.RI "uint8_t \fBMaskLength\fP () const"
.br
.RI "Returns the length of the netmask (number of significant bits)\&. "
.ti -1c
.RI "uint8_t \fBMaskLength\fP (uint8_t maskLength)"
.br
.RI "Changes the length of the netmask (number of significant bits)\&. "
.ti -1c
.RI "\fBIpv4Address\fP \fBFirstAddress\fP () const"
.br
.RI "Returns the first IPv4 address in the prefix's range\&. "
.ti -1c
.RI "\fBIpv4Address\fP \fBLastAddress\fP () const"
.br
.RI "Returns the last IPv4 address in the prefix's range\&. "
.ti -1c
.RI "bool \fBSet\fP (const \fBIpv4Address\fP &network, uint8_t maskLength)"
.br
.RI "Initializes the prefix using an IP address and a netmask length\&. "
.ti -1c
.RI "void \fBSet\fP (const \fBIpv4Address\fP &network, const \fBIpv4Address\fP &netmask)"
.br
.RI "Initializes the prefix using an IP address and a netmask\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBIpv4Prefix\fP &prefix) const"
.br
.RI "Returns true if \fRthis\fP is less than \fRprefix\fP\&. "
.ti -1c
.RI "bool \fBoperator>\fP (const \fBIpv4Prefix\fP &prefix) const"
.br
.RI "Returns true if \fRthis\fP is greater than \fRprefix\fP\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBIpv4Prefix\fP &prefix) const"
.br
.RI "Equal-to operator\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBIpv4Prefix\fP &prefix) const"
.br
.RI "Not-equal-to operator\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP & \fBoperator++\fP ()"
.br
.RI "Pre-increment operator\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP \fBoperator++\fP (int)"
.br
.RI "Post-increment operator\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP & \fBoperator\-\-\fP ()"
.br
.RI "Pre-decrement operator\&. "
.ti -1c
.RI "\fBIpv4Prefix\fP \fBoperator\-\-\fP (int)"
.br
.RI "Post-decrement operator\&. "
.ti -1c
.RI "bool \fBContains\fP (const \fBIpv4Address\fP &address) const"
.br
.RI "Returs true if \fRaddress\fP falls within the prefix\&. "
.ti -1c
.RI "bool \fBContains\fP (const \fBIpv4Prefix\fP &prefix) const"
.br
.RI "Returns true if \fRprefix\fP is a subnet of this\&. "
.ti -1c
.RI "bool \fBAdjacent\fP (const \fBIpv4Prefix\fP &prefix) const"
.br
.RI "Returns true if the given \fRprefix\fP is adjacent\&. "
.ti -1c
.RI "std::pair< bool, \fBIpv4Prefix\fP > \fBCombine\fP (const \fBIpv4Prefix\fP &prefix) const"
.br
.RI "If the given \fRprefix\fP can be combined with this prefix to form a single prefix, returns [true,combinedPrefix]\&. "
.ti -1c
.RI "ssize_t \fBRead\fP (int fd) override"
.br
.RI "Reads a prefix from a file descriptor\&. "
.ti -1c
.RI "ssize_t \fBWrite\fP (int fd) const override"
.br
.RI "Writes a prefix to a file descriptor\&. "
.ti -1c
.RI "size_t \fBRead\fP (FILE *f) override"
.br
.RI "Reads a prefix from a FILE pointer\&. "
.ti -1c
.RI "size_t \fBWrite\fP (FILE *f) const override"
.br
.RI "Writes a prefix to a FILE pointer\&. "
.ti -1c
.RI "std::istream & \fBRead\fP (std::istream &is) override"
.br
.RI "Reads a prefix from an istream\&. Returns the istream\&. "
.ti -1c
.RI "std::ostream & \fBWrite\fP (std::ostream &os) const override"
.br
.RI "Writes a prefix to an ostream\&. Returns the ostream\&. "
.ti -1c
.RI "int \fBRead\fP (gzFile gzf) override"
.br
.RI "Reads a prefix from a gzFile\&. "
.ti -1c
.RI "int \fBWrite\fP (gzFile gzf) const override"
.br
.RI "Writes a prefix to a gzFile\&. "
.ti -1c
.RI "int \fBBZRead\fP (BZFILE *bzf) override"
.br
.RI "Reads a prefix from a BZFILE pointer\&. "
.ti -1c
.RI "int \fBBZWrite\fP (BZFILE *bzf) const override"
.br
.RI "Writes a prefix to a BZFILE pointer\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::ip::tcp::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the prefix from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::ip::tcp::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the prefix to \fRs\fP\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::local::stream_protocol::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the prefix from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::local::stream_protocol::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the prefix to \fRs\fP\&. "
.ti -1c
.RI "bool \fBRead\fP (boost::asio::generic::stream_protocol::socket &s, boost::system::error_code &ec) override"
.br
.RI "Reads the prefix from \fRs\fP\&. "
.ti -1c
.RI "bool \fBWrite\fP (boost::asio::generic::stream_protocol::socket &s, boost::system::error_code &ec) const override"
.br
.RI "Writes the prefix to \fRs\fP\&. "
.ti -1c
.RI "std::string \fBToString\fP () const"
.br
.RI "Returns a string representation of the prefix in 'a\&.b\&.c\&.d/n' form\&. "
.ti -1c
.RI "std::string \fBToShortString\fP () const"
.br
.RI "Returns a string representation of the prefix in 'a\&.b\&.c\&.d/n' form, but with unnecessary trailing zeros removed from the IP address\&. "
.ti -1c
.RI "uint64_t \fBStreamedLength\fP () const override"
.br
.RI "Returns the number of bytes that should be written if a \fBWrite()\fP member was called\&. "
.ti -1c
.RI "const uint8_t * \fBData\fP () const"
.br
.RI "Returns a pointer to the 5-byte data\&. "
.in -1c

Public Member Functions inherited from \fBDwm::StreamReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::StreamWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::GZReadable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZReadable\fP ()"
.br
.RI "destructor "
.in -1c

Public Member Functions inherited from \fBDwm::GZWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZWritable\fP ()"
.br
.RI "destructor "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, const \fBIpv4Prefix\fP &prefix)"
.br
.RI "Prints an \fBIpv4Prefix\fP to an ostream in 'a\&.b\&.c\&.d/n' form\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class encapsulates an IPv4 address and netmask\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Dwm::Ipv4Prefix::Ipv4Prefix (const std::string & prefix)"

.PP
Construct from a string of the form a\&.b\&.c\&.d/n\&. Note we accept short addresses, for example 128\&.35/16 or 10/8\&. We also accept host addresses with netmasks, and will properly apply the netmask\&. 
.SH "Member Function Documentation"
.PP 
.SS "int Dwm::Ipv4Prefix::BZRead (BZFILE * bzf)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads a prefix from a BZFILE pointer\&. Returns the number of bytes read on success, -1 on failure\&. 
.PP
Implements \fBDwm::BZ2Readable\fP\&.
.SS "int Dwm::Ipv4Prefix::BZWrite (BZFILE * bzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes a prefix to a BZFILE pointer\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::BZ2Writable\fP\&.
.SS "std::pair< bool, \fBIpv4Prefix\fP > Dwm::Ipv4Prefix::Combine (const \fBIpv4Prefix\fP & prefix) const"

.PP
If the given \fRprefix\fP can be combined with this prefix to form a single prefix, returns [true,combinedPrefix]\&. Else returns [false,255\&.255\&.255\&.255/32]\&. Prefixes may be combined if one contains the other or they are adjacent and have the same netmask length\&. 
.SS "const uint8_t * Dwm::Ipv4Prefix::Data () const\fR [inline]\fP"

.PP
Returns a pointer to the 5-byte data\&. This should not be used by typical applications; it is only needed by things like hash algorithms (such as that used by the \fBIpv4Routes\fP template class)\&. 
.SS "bool Dwm::Ipv4Prefix::operator< (const \fBIpv4Prefix\fP & prefix) const"

.PP
Returns true if \fRthis\fP is less than \fRprefix\fP\&. The comparison uses the typical ordering: if the IP address of \fRthis\fP is less than the IP address of \fRprefix\fP, returns true\&. If the IP address of \fRthis\fP is equal to the IP address of \fRprefix\fP, returns true if the netmask length of \fRthis\fP is lower than the netmask length of \fRprefix\fP\&. In all other cases, returns false\&. 
.SS "bool Dwm::Ipv4Prefix::operator> (const \fBIpv4Prefix\fP & prefix) const"

.PP
Returns true if \fRthis\fP is greater than \fRprefix\fP\&. The comparison uses the typical ordering: if the IP address of \fRthis\fP is greater than the IP address of \fRprefix\fP, returns true\&. If the IP address of \fRthis\fP is equal to the IP address of \fRprefix\fP, returns true if the netmask length of \fRthis\fP is higher than the netmask length of \fRprefix\fP\&. In all other cases, returns false\&. 
.SS "bool Dwm::Ipv4Prefix::Read (boost::asio::generic::stream_protocol::socket & s, boost::system::error_code & ec)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from \fRs\fP\&. Returns true on success, false on failure\&. On failure \fRec\fP will be set to the error code\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "bool Dwm::Ipv4Prefix::Read (boost::asio::ip::tcp::socket & s, boost::system::error_code & ec)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from \fRs\fP\&. Returns true on success, false on failure\&. On failure \fRec\fP will be set to the error code\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "bool Dwm::Ipv4Prefix::Read (boost::asio::local::stream_protocol::socket & s, boost::system::error_code & ec)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads the prefix from \fRs\fP\&. Returns true on success, false on failure\&. On failure \fRec\fP will be set to the error code\&. 
.PP
Implements \fBDwm::ASIOReadable\fP\&.
.SS "size_t Dwm::Ipv4Prefix::Read (FILE * f)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads a prefix from a FILE pointer\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileReadable\fP\&.
.SS "int Dwm::Ipv4Prefix::Read (gzFile gzf)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads a prefix from a gzFile\&. Returns the number of bytes read on success, -1 on failure\&. 
.PP
Implements \fBDwm::GZReadable\fP\&.
.SS "ssize_t Dwm::Ipv4Prefix::Read (int fd)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads a prefix from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorReadable\fP\&.
.SS "std::istream & Dwm::Ipv4Prefix::Read (std::istream & is)\fR [override]\fP, \fR [virtual]\fP"

.PP
Reads a prefix from an istream\&. Returns the istream\&. 
.PP
Implements \fBDwm::StreamReadable\fP\&.
.SS "uint64_t Dwm::Ipv4Prefix::StreamedLength () const\fR [inline]\fP, \fR [override]\fP, \fR [virtual]\fP"

.PP
Returns the number of bytes that should be written if a \fBWrite()\fP member was called\&. 
.PP
Implements \fBDwm::StreamedLengthCapable\fP\&.
.SS "bool Dwm::Ipv4Prefix::Write (boost::asio::generic::stream_protocol::socket & s, boost::system::error_code & ec) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to \fRs\fP\&. Returns true on success, false on failure\&. On failure \fRec\fP will be set to the error code\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "bool Dwm::Ipv4Prefix::Write (boost::asio::ip::tcp::socket & s, boost::system::error_code & ec) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to \fRs\fP\&. Returns true on success, false on failure\&. On failure \fRec\fP will be set to the error code\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "bool Dwm::Ipv4Prefix::Write (boost::asio::local::stream_protocol::socket & s, boost::system::error_code & ec) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the prefix to \fRs\fP\&. Returns true on success, false on failure\&. On failure \fRec\fP will be set to the error code\&. 
.PP
Implements \fBDwm::ASIOWritable\fP\&.
.SS "size_t Dwm::Ipv4Prefix::Write (FILE * f) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes a prefix to a FILE pointer\&. Returns 1 on success, 0 on failure\&. 
.PP
Implements \fBDwm::FileWritable\fP\&.
.SS "int Dwm::Ipv4Prefix::Write (gzFile gzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes a prefix to a gzFile\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::GZWritable\fP\&.
.SS "ssize_t Dwm::Ipv4Prefix::Write (int fd) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes a prefix to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorWritable\fP\&.
.SS "std::ostream & Dwm::Ipv4Prefix::Write (std::ostream & os) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes a prefix to an ostream\&. Returns the ostream\&. 
.PP
Implements \fBDwm::StreamWritable\fP\&.
.SH "Friends And Related Symbol Documentation"
.PP 
.SS "std::ostream & operator<< (std::ostream & os, const \fBIpv4Prefix\fP & prefix)\fR [friend]\fP"

.PP
Prints an \fBIpv4Prefix\fP to an ostream in 'a\&.b\&.c\&.d/n' form\&. Returns the ostream\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
