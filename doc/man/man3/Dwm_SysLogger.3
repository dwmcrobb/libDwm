.TH "Dwm::SysLogger" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::SysLogger \- This class encapsulates syslog logging in global scope (all members are static)\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmSysLogger\&.hh>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBOpen\fP (const char *ident, int logopt, int facility)"
.br
.RI "Opens the logger for syslog logging\&. "
.ti -1c
.RI "static bool \fBOpen\fP (const char *ident, int logopt, const std::string &facility)"
.br
.RI "The same as \fBOpen()\fP above except the log facility is passed as a const reference to a string which must be one of 'user', 'daemon', 'auth', 'local0', 'local1', 'local2', 'local3', 'local4', 'local5', 'local6', or 'local7'\&. "
.ti -1c
.RI "static bool \fBClose\fP ()"
.br
.RI "Closes the logger\&. "
.ti -1c
.RI "static bool \fBLog\fP (int priority, const char *message,\&.\&.\&.)"
.br
.RI "Just like syslog(), takes a priority and a format string and variable list of arguments\&. "
.ti -1c
.RI "static bool \fBLog\fP (const std::string &filename, int lineno, const std::string &function, int priority, const char *message,\&.\&.\&.)"
.br
.RI "Like syslog(), but takes \fRfilename\fP, \fRlineno\fP and \fRfunction\fP arguments which are usually \fBFILE\fP, \fBLINE\fP and \fBPRETTY_FUNCTION\fP in the caller source\&. "
.ti -1c
.RI "template<typename \&.\&.\&. Args> static bool \fBFmtLog\fP (const std::string &filename, int lineno, const std::string &function, int priority, std::format_string< Args\&.\&.\&. > fm, Args &&\&.\&.\&. args)"
.br
.ti -1c
.RI "static bool \fBVaLog\fP (int priority, const std::string &message, va_list &vaList)"
.br
.RI "Just like vsyslog(), takes a priority and a format string and a va_list\&. "
.ti -1c
.RI "static bool \fBVaLog\fP (const std::string &filename, int lineno, const std::string &function, int priority, const std::string &message, va_list &vaList)"
.br
.RI "Just like vsyslog(), but takes \fRfilename\fP, \fRlineno\fP and \fRfunction\fP arguments which are usually \fBFILE\fP, \fBLINE\fP and \fBPRETTY_FUNCTION\fP in the caller source\&. "
.ti -1c
.RI "static bool \fBShowPriorities\fP ()"
.br
.RI "If the logger is set to show priorities in each log message, returns true\&. "
.ti -1c
.RI "static bool \fBShowPriorities\fP (bool showPriorities)"
.br
.RI "If \fRshowPriorities\fP is true, the logger will tag each log message with an indication of the message's priority\&. "
.ti -1c
.RI "static bool \fBShowFileLocation\fP ()"
.br
.RI "If the logger is set to show file location information in Log(const std::string &, int, int, const char *, \&.\&.\&.), returns true\&. "
.ti -1c
.RI "static bool \fBShowFileLocation\fP (bool showFileLocation)"
.br
.RI "If \fRshowFileLocation\fP is true, the logger will show the file and line number information in each log message logged with Log(const std::string &, int, int, const char *, \&.\&.\&.)\&. "
.ti -1c
.RI "static bool \fBShowFunction\fP ()"
.br
.RI "If the logger is set to show function information in Log(const string &, int, const string &, int, const char *, \&.\&.\&.), returns true\&. "
.ti -1c
.RI "static bool \fBShowFunction\fP (bool showFunction)"
.br
.RI "If \fRshowFunction\fP is true, the logger will show function information in each log message logged with Log(const string &, int, const string &, int, const char *, \&.\&.\&.)\&. "
.ti -1c
.RI "static int \fBMinimumPriority\fP ()"
.br
.RI "Returns the lowest message priority that the logger will log\&. "
.ti -1c
.RI "static int \fBMinimumPriority\fP (int minimumPriority)"
.br
.RI "Sets and returns the lowest message priority that the logger will log\&. "
.ti -1c
.RI "static int \fBMinimumPriority\fP (const std::string &minimumPriority)"
.br
.RI "Sets and returns the lowest message priority that the logger will log\&. "
.ti -1c
.RI "static std::string \fBPriorityTag\fP (int priority)"
.br
.RI "Returns the priority tag ('[F]', '[W]', et\&. "
.ti -1c
.RI "static int \fBPriorityValue\fP (const std::string &name)"
.br
.RI "Returns the priority value for the given priority \fRname\fP\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class encapsulates syslog logging in global scope (all members are static)\&. 
.SH "Member Function Documentation"
.PP 
.SS "static bool Dwm::SysLogger::Close ()\fR [static]\fP"

.PP
Closes the logger\&. Returns true on success, false on failure\&. Note that this is essentially a no-op\&. We don't want to call closelog() because we don't want to prevent external syslog() calls\&. 
.SS "static bool Dwm::SysLogger::Log (int priority, const char * message,  \&.\&.\&.)\fR [static]\fP"

.PP
Just like syslog(), takes a priority and a format string and variable list of arguments\&. Returns true on success, false on failure\&. 
.SS "static int Dwm::SysLogger::MinimumPriority (const std::string & minimumPriority)\fR [static]\fP"

.PP
Sets and returns the lowest message priority that the logger will log\&. \fRminimumPriority\fP may be 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert' or 'emergency'\&. 
.SS "static int Dwm::SysLogger::MinimumPriority (int minimumPriority)\fR [static]\fP"

.PP
Sets and returns the lowest message priority that the logger will log\&. By default, all message priorities will be logged (minimum priority == LOG_DEBUG)\&. 
.SS "static bool Dwm::SysLogger::Open (const char * ident, int logopt, int facility)\fR [static]\fP"

.PP
Opens the logger for syslog logging\&. \fRident\fP, \fRlogopt\fP and \fRfacility\fP are used directly to call openlog() (see the syslog(3) manpage)\&. Returns true on success, false on failure\&. Note that openlog() gives no indication of failure, hence we only return false if we get an unacceptable \fRlogopt\fP or \fRfacility\fP\&. The acceptable facilities are \fRLOG_USER\fP, \fRLOG_DAEMON\fP, \fRLOG_AUTH\fP, \fRLOG_LOCAL0\fP, \fRLOG_LOCAL1\fP, \fRLOG_LOCAL2\fP, \fRLOG_LOCAL3\fP, \fRLOG_LOCAL4\fP, \fRLOG_LOCAL5\fP, \fRLOG_LOCAL6\fP, and \fRLOG_LOCAL7\fP\&. The acceptable log options are \fRLOG_PID\fP, \fRLOG_CONS\fP and \fRLOG_NDELAY\fP on all systems\&. \fRLOG_PERROR\fP is accepted on systems which support it\&. \fRLOG_NOWAIT\fP is accepted on systems which support it (Solaris, for example)\&. Note this member can cause adverse affects on external syslog() calls because syslog facilities are global\&. That's why all of our members are static\&. 
.SS "static std::string Dwm::SysLogger::PriorityTag (int priority)\fR [static]\fP"

.PP
Returns the priority tag ('[F]', '[W]', et\&. al\&.) for a given priority\&. 
.SS "static bool Dwm::SysLogger::ShowFileLocation (bool showFileLocation)\fR [static]\fP"

.PP
If \fRshowFileLocation\fP is true, the logger will show the file and line number information in each log message logged with Log(const std::string &, int, int, const char *, \&.\&.\&.)\&. If \fRshowFileLocation\fP is false, the logger will not show file and line number information in log messages\&. 
.SS "static bool Dwm::SysLogger::ShowFunction (bool showFunction)\fR [static]\fP"

.PP
If \fRshowFunction\fP is true, the logger will show function information in each log message logged with Log(const string &, int, const string &, int, const char *, \&.\&.\&.)\&. If \fRshowFunction\fP is false, the logger will not show function information in log messages\&. 
.SS "static bool Dwm::SysLogger::ShowPriorities ()\fR [static]\fP"

.PP
If the logger is set to show priorities in each log message, returns true\&. Else returns false\&. 
.SS "static bool Dwm::SysLogger::ShowPriorities (bool showPriorities)\fR [static]\fP"

.PP
If \fRshowPriorities\fP is true, the logger will tag each log message with an indication of the message's priority\&. The tags are of the form '[x]' where x is a single letter\&. Hence we have '[M]' for LOG_EMERG, '[A]' for LOG_ALERT, '[C]' for LOG_CRIT, '[E]' for LOG_ERR, '[W]' for LOG_WARN, '[N]' for LOG_NOTICE, '[I]' for LOG_INFO and '[D]' for LOG_DEBUG\&. By default, message priorities are not shown\&. 
.SS "static bool Dwm::SysLogger::VaLog (const std::string & filename, int lineno, const std::string & function, int priority, const std::string & message, va_list & vaList)\fR [static]\fP"

.PP
Just like vsyslog(), but takes \fRfilename\fP, \fRlineno\fP and \fRfunction\fP arguments which are usually \fBFILE\fP, \fBLINE\fP and \fBPRETTY_FUNCTION\fP in the caller source\&. Returns true on success, false on failure\&. 
.SS "static bool Dwm::SysLogger::VaLog (int priority, const std::string & message, va_list & vaList)\fR [static]\fP"

.PP
Just like vsyslog(), takes a priority and a format string and a va_list\&. Returns true on success, false on failure\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
