.TH "Dwm::LoadBalancer< ItemT >" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::LoadBalancer< ItemT > \- A simple load balancer class template which balances work across \fBWorker\fP objects that each run in their own thread\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmLoadBalancer\&.hh>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBWorker\fP"
.br
.RI "\fBWorker\fP class for \fBLoadBalancer\fP\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBAddWorker\fP (\fBWorker\fP *worker)"
.br
.RI "Adds the given worker to the load balancer\&. "
.ti -1c
.RI "bool \fBAddWork\fP (ItemT item)"
.br
.RI "Adds work to be done with load balancing\&. "
.ti -1c
.RI "template<typename InputIterator > bool \fBAddWork\fP (InputIterator firstIter, InputIterator lastIter)"
.br
.RI "Adds work to be done with load balancing\&. "
.ti -1c
.RI "void \fBStop\fP ()"
.br
.RI "Calls \fBWorker::Stop()\fP on all encapsulated \fBWorker\fP objects\&. "
.ti -1c
.RI "const std::vector< std::unique_ptr< \fBWorker\fP > > & \fBWorkers\fP () const"
.br
.RI "Returns a const reference to the encapsulated workers\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename ItemT>
.br
class Dwm::LoadBalancer< ItemT >"A simple load balancer class template which balances work across \fBWorker\fP objects that each run in their own thread\&. 

A user would derive a worker class from LoadBalancer<ItemT>::Worker, and implement the Worker::ProcessWork(ItemT) member\&. The worker can be added to a \fBLoadBalancer\fP via the \fBLoadBalancer::AddWorker()\fP member\&. Work can be added to the \fBLoadBalancer\fP with \fBAddWork(ItemT)\fP\&. A unit of work is encapsulated in the ItemT template parameter\&. This is a template so that any copyable type can be used as a unit of work\&.
.PP
Today, this class template may not be all that useful (we have the concurrency features of C++11 and C++14)\&. I originally wrote this class using pthreads, before we had C++11 and C++14\&. It's still in use in some of my code, but I may revisit this soon and modernize it\&. For now the only modernization is the migration to std::thread\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename ItemT > bool \fBDwm::LoadBalancer\fP< ItemT >::AddWork (ItemT item)\fR [inline]\fP"

.PP
Adds work to be done with load balancing\&. Returns true on success, false on failure\&. 
.SS "template<typename ItemT > void \fBDwm::LoadBalancer\fP< ItemT >::AddWorker (\fBWorker\fP * worker)\fR [inline]\fP"

.PP
Adds the given worker to the load balancer\&. Note that on return, the caller no longer owns \fRworker\fP\&. It is assigned to a unique_ptr that is owned by the \fBLoadBalancer\fP\&. 
.SS "template<typename ItemT > const std::vector< std::unique_ptr< \fBWorker\fP > > & \fBDwm::LoadBalancer\fP< ItemT >::Workers () const\fR [inline]\fP"

.PP
Returns a const reference to the encapsulated workers\&. NOT thread safe! This is mostly just for unit testing\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
