.TH "Dwm::FileLogger" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::FileLogger \- This class encapsulates syslog-like logging, but uses files instead of the syslog facility\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmFileLogger\&.hh>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBBufferingType\fP { \fBe_notBuffered\fP = _IONBF, \fBe_lineBuffered\fP = _IOLBF, \fBe_blockBuffered\fP = _IOFBF }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFileLogger\fP ()"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fB~FileLogger\fP ()"
.br
.RI "Destructor\&. Closes the log if it's open\&. "
.ti -1c
.RI "bool \fBOpen\fP (const std::string &ident, int logopt, const std::string &filename, BufferingType bufferingType=e_blockBuffered)"
.br
.RI "Opens the logger\&. "
.ti -1c
.RI "std::string \fBFilePrefix\fP () const"
.br
.RI "Returns the log file prefix, i\&.e\&. "
.ti -1c
.RI "bool \fBIsOpen\fP () const"
.br
.RI "Returns true if the logger is open, else returns false\&. "
.ti -1c
.RI "bool \fBClose\fP ()"
.br
.RI "Closes the logger\&. "
.ti -1c
.RI "bool \fBLog\fP (int priority, const char *message,\&.\&.\&.)"
.br
.RI "Just like syslog(), takes a priority and a format string and variable list of arguments\&. "
.ti -1c
.RI "bool \fBLog\fP (const std::string &filename, int lineno, const std::string &function, int priority, const char *message,\&.\&.\&.)"
.br
.RI "Like syslog(), but takes \fRfilename\fP, \fRlineno\fP and \fRfunction\fP arguments which are usually \fBFILE\fP, \fBLINE\fP and \fBPRETTY_FUNCTION\fP in the caller source\&. "
.ti -1c
.RI "bool \fBVaLog\fP (int priority, const std::string &message, va_list &vaList)"
.br
.RI "Just like vsyslog(), takes a priority and a format string and a va_list\&. "
.ti -1c
.RI "bool \fBVaLog\fP (const std::string &filename, int lineno, const std::string &function, int priority, const std::string &message, va_list &vaList)"
.br
.RI "Just like vsyslog(), but takes \fRfilename\fP, \fRlineno\fP and \fRfunction\fP arguments which are usually \fBFILE\fP, \fBLINE\fP and \fBPRETTY_FUNCTION\fP in the caller source\&. "
.ti -1c
.RI "bool \fBFlush\fP ()"
.br
.RI "Writes buffered data to the output log (i\&.e\&. "
.ti -1c
.RI "int \fBMinimumPriority\fP () const"
.br
.RI "Returns the lowest message priority that the logger will log\&. "
.ti -1c
.RI "int \fBMinimumPriority\fP (int minimumPriority)"
.br
.RI "Sets and returns the lowest message priority that the logger will log\&. "
.ti -1c
.RI "bool \fBShowPriorities\fP () const"
.br
.RI "If the logger is set to show priorities in each log message, returns true\&. "
.ti -1c
.RI "bool \fBShowPriorities\fP (bool showPriorities)"
.br
.RI "If \fRshowPriorities\fP is true, the logger will tag each log message with an indication of the message's priority\&. "
.ti -1c
.RI "uint32_t \fBRolloverSize\fP () const"
.br
.RI "Returns the current rollover size used by the logger\&. "
.ti -1c
.RI "bool \fBShowFunction\fP () const"
.br
.RI "If the logger is set to show function information in Log(const string &, int, const string &, int, const char *, \&.\&.\&.), returns true\&. "
.ti -1c
.RI "bool \fBShowFunction\fP (bool showFunction)"
.br
.RI "If \fRshowFunction\fP is true, the logger will show function information in each log message logged with Log(const string &, int, const string &, int, const char *, \&.\&.\&.)\&. "
.ti -1c
.RI "bool \fBShowFileLocation\fP () const"
.br
.RI "If the logger is set to show file location information, returns true\&. "
.ti -1c
.RI "bool \fBShowFileLocation\fP (bool showFileLocation)"
.br
.RI "If \fRshowFileLocation\fP is true, the logger will show the file and line number information in each log message logged with Log(const string &, int, const string &, int, const char * , \&.\&.\&.)\&. "
.ti -1c
.RI "uint32_t \fBRolloverSize\fP (uint32_t rolloverSize)"
.br
.RI "Sets and returns the rollover size used by the logger\&. "
.ti -1c
.RI "uint32_t \fBNumRolloverFiles\fP () const"
.br
.RI "Returns the number of rollover files used by the logger\&. "
.ti -1c
.RI "uint32_t \fBNumRolloverFiles\fP (uint32_t numRolloverFiles)"
.br
.RI "Sets and returns the number of rollover files used by the logger\&. "
.ti -1c
.RI "bool \fBSetPriorities\fP (const std::map< int, std::pair< std::string, std::string > > &priorities)"
.br
.RI "Overrides the standard priority tags and names\&. "
.ti -1c
.RI "std::string \fBPriorityTag\fP (int priority)"
.br
.RI "Returns the priority tag ('[F]', '[W]', et\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const uint32_t \fBk_defaultRolloverSize\fP = 100 * 1024"
.br
.ti -1c
.RI "static const uint32_t \fBk_defaultNumRolloverFiles\fP = 1"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class encapsulates syslog-like logging, but uses files instead of the syslog facility\&. 

You may set the maximum size of the log file (in bytes) by using the \fBRolloverSize(uint32_t)\fP member\&. The default is 102400 (100K) bytes\&. You may set the number of rollover files using the \fBNumRolloverFiles(uint32_t)\fP member\&. The default is 1\&. The logger will roll over 'logfile' to 'logfile\&.0' and 'logfile\&.N' to 'logfile\&.N+1' for { 0 <= N < \fBNumRolloverFiles()\fP }\&. If the number of rollover files is set to 0, the log file will be truncated each time it grows beyond \fBRolloverSize()\fP\&. Note that \fBRolloverSize()\fP is only an estimate; the actual log size will be slightly larger since we treat log messages as atomic (we don't split them across files)\&. You may set a priority threshold with \fBMinimumPriority(int)\fP; any messages below this priority will be silently discarded\&. This allows dynamic logging levels, as well as allowing syslog\&.conf-like priority filtering functionality\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::string Dwm::FileLogger::FilePrefix () const"

.PP
Returns the log file prefix, i\&.e\&. the \fRfilename\fP argument that was given to \fBOpen()\fP\&. 
.SS "bool Dwm::FileLogger::Flush ()"

.PP
Writes buffered data to the output log (i\&.e\&. flushes the buffer)\&. Returns true on success, false on failure\&. 
.SS "bool Dwm::FileLogger::Log (int priority, const char * message,  \&.\&.\&.)"

.PP
Just like syslog(), takes a priority and a format string and variable list of arguments\&. Returns true on success, false on failure\&. 
.SS "int Dwm::FileLogger::MinimumPriority (int minimumPriority)"

.PP
Sets and returns the lowest message priority that the logger will log\&. By default, all message priorities will be logged (minimum priority == LOG_DEBUG)\&. 
.SS "bool Dwm::FileLogger::Open (const std::string & ident, int logopt, const std::string & filename, BufferingType bufferingType = \fRe_blockBuffered\fP)"

.PP
Opens the logger\&. Returns true on success, false on failure\&. \fRident\fP is used to name entries in the log (in the same manner as openlog())\&. \fRlogopt\fP is the logging options, used in the same manner as the corresponding argument to openlog()\&. The acceptable log options are \fRLOG_PID\fP, \fRLOG_CONS\fP and \fRLOG_NDELAY\fP on all systems\&. \fRLOG_PERROR\fP is accepted on systems which support it\&. \fRbufferingType\fP specifies the desired buffering\&. Specifiy \fRe_notBuffered\fP to get unbuffered, \fRe_lineBuffered\fP to get line buffered, and \fRe_blockBuffered\fP to get fully buffered\&. 
.br
 
.SS "std::string Dwm::FileLogger::PriorityTag (int priority)"

.PP
Returns the priority tag ('[F]', '[W]', et\&. al\&.) for a given \fRpriority\fP\&. 
.SS "uint32_t Dwm::FileLogger::RolloverSize (uint32_t rolloverSize)"

.PP
Sets and returns the rollover size used by the logger\&. This is the number of bytes at which the logger will roll over the log files\&. 
.SS "bool Dwm::FileLogger::SetPriorities (const std::map< int, std::pair< std::string, std::string > > & priorities)"

.PP
Overrides the standard priority tags and names\&. The key in \fRpriorities\fP is the log priority (e\&.g\&. \fRLOG_ERR\fP), and each value is a (tag,name) pair, e\&.g\&. ('[E]', 'error')\&. 
.SS "bool Dwm::FileLogger::ShowFileLocation (bool showFileLocation)"

.PP
If \fRshowFileLocation\fP is true, the logger will show the file and line number information in each log message logged with Log(const string &, int, const string &, int, const char * , \&.\&.\&.)\&. If \fRshowFileLocation\fP is false, the logger will not show file and line number information in log messages\&. 
.SS "bool Dwm::FileLogger::ShowFunction (bool showFunction)"

.PP
If \fRshowFunction\fP is true, the logger will show function information in each log message logged with Log(const string &, int, const string &, int, const char *, \&.\&.\&.)\&. If \fRshowFunction\fP is false, the logger will not show function information in log messages\&. 
.SS "bool Dwm::FileLogger::ShowPriorities () const"

.PP
If the logger is set to show priorities in each log message, returns true\&. Else returns false\&. 
.SS "bool Dwm::FileLogger::ShowPriorities (bool showPriorities)"

.PP
If \fRshowPriorities\fP is true, the logger will tag each log message with an indication of the message's priority\&. The tags are of the form '[x]' where x is a single letter\&. Hence we have '[M]' for LOG_EMERG, '[A]' for LOG_ALERT, '[C]' for LOG_CRIT, '[E]' for LOG_ERR, '[W]' for LOG_WARN, '[N]' for LOG_NOTICE, '[I]' for LOG_INFO and '[D]' for LOG_DEBUG\&. By default, message priorities are not shown\&. 
.SS "bool Dwm::FileLogger::VaLog (const std::string & filename, int lineno, const std::string & function, int priority, const std::string & message, va_list & vaList)"

.PP
Just like vsyslog(), but takes \fRfilename\fP, \fRlineno\fP and \fRfunction\fP arguments which are usually \fBFILE\fP, \fBLINE\fP and \fBPRETTY_FUNCTION\fP in the caller source\&. Returns true on success, false on failure\&. 
.SS "bool Dwm::FileLogger::VaLog (int priority, const std::string & message, va_list & vaList)"

.PP
Just like vsyslog(), takes a priority and a format string and a va_list\&. Returns true on success, false on failure\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
