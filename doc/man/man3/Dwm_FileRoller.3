.TH "Dwm::FileRoller" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::FileRoller \- This class can be used to roll over files such as log files\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmFileRoller\&.hh>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBCompressionEnum\fP { \fBe_compressionNone\fP, \fBe_compressionGzip\fP, \fBe_compressionBzip2\fP }"
.br
.RI "Available compression types\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFileRoller\fP (const std::string &dir, const std::string &prefix, size_t maxSize, size_t numFiles, \fBCompressionEnum\fP compression=e_compressionNone)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "bool \fBFilesNeedRolling\fP () const"
.br
.RI "Returns true if the active file (identified by the \fRdir\fP and \fRprefix\fP in the call to our constructor) is larger than our maximum file size (set with \fRmaxSize\fP in our constructor)\&. "
.ti -1c
.RI "bool \fBFilesNeedRolling\fP (int fd) const"
.br
.RI "Returns true if the current write position of \fRfd\fP is larger than our maximum file size (set with \fRmaxSize\fP in our constructor)\&. "
.ti -1c
.RI "bool \fBFilesNeedRolling\fP (std::ostream &os) const"
.br
.RI "Returns true if the current write position of \fRos\fP is larger than our maximum file size (set with \fRmaxSize\fP in our constructor)\&. "
.ti -1c
.RI "bool \fBFilesNeedRolling\fP (FILE *f) const"
.br
.RI "Returns true if the current write position of \fRf\fP is larger than our maximum file size (set with \fRmaxSize\fP in our constructor)\&. "
.ti -1c
.RI "bool \fBRollFiles\fP ()"
.br
.RI "Rolls the files\&. "
.ti -1c
.RI "size_t \fBMaxSize\fP () const"
.br
.RI "Returns the max file size\&. "
.ti -1c
.RI "size_t \fBMaxSize\fP (size_t maxSize)"
.br
.RI "Sets and returns the max file size\&. "
.ti -1c
.RI "size_t \fBNumFiles\fP () const"
.br
.RI "Returns the max file size\&. "
.ti -1c
.RI "size_t \fBNumFiles\fP (size_t numFiles)"
.br
.RI "Sets and returns the max file size\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class can be used to roll over files such as log files\&. 

Typically an application logging to a file will periodically call one of the \fBFilesNeedRolling()\fP members, and if it returns true, close the logging file and then call \fBRollFiles()\fP\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Dwm::FileRoller::FileRoller (const std::string & dir, const std::string & prefix, size_t maxSize, size_t numFiles, \fBCompressionEnum\fP compression = \fRe_compressionNone\fP)"

.PP
Constructor\&. \fRdir\fP is the directory in which the files are stored\&. \fRprefix\fP is the name of the first file, which presumably your application is using for logging or the like\&. \fRmaxSize\fP is the file size (in bytes) at which we'd like to roll over files\&. \fRnumFiles\fP is the number of files we'd like to keep beyond the first file\&. \fRcompression\fP may be set to use gzip or bzip2 compression\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool Dwm::FileRoller::FilesNeedRolling (FILE * f) const"

.PP
Returns true if the current write position of \fRf\fP is larger than our maximum file size (set with \fRmaxSize\fP in our constructor)\&. Here we assume that \fRf\fP is a FILE pointer being used to write to the active file (identified by the \fRdir\fP and \fRprefix\fP in the call to our constructor)\&. 
.PP
\fBNote\fP
.RS 4
This is a convenience routine that avoids the overhead of calling stat()\&. 
.RE
.PP

.SS "bool Dwm::FileRoller::FilesNeedRolling (int fd) const"

.PP
Returns true if the current write position of \fRfd\fP is larger than our maximum file size (set with \fRmaxSize\fP in our constructor)\&. Here we assume that \fRfd\fP is a descriptor being used to write to the active file (identified by the \fRdir\fP and \fRprefix\fP in the call to our constructor)\&. 
.PP
\fBNote\fP
.RS 4
This is a convenience routine that avoids the overhead of calling stat()\&. 
.RE
.PP

.SS "bool Dwm::FileRoller::FilesNeedRolling (std::ostream & os) const"

.PP
Returns true if the current write position of \fRos\fP is larger than our maximum file size (set with \fRmaxSize\fP in our constructor)\&. Here we assume that \fRos\fP is an ostream being used to write to the active file (identified by the \fRdir\fP and \fRprefix\fP in the call to our constructor)\&. 
.PP
\fBNote\fP
.RS 4
This is a convenience routine that avoids the overhead of calling stat()\&. 
.RE
.PP

.SS "bool Dwm::FileRoller::RollFiles ()"

.PP
Rolls the files\&. The active file should be closed before calling this function\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
