.TH "DwmUnitAssert.hh" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DwmUnitAssert.hh \- \fBDwm::Assertions\fP class definition and \fBUnitAssert()\fP macro for unit tests\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <cstdint>\fP
.br
\fR#include <iostream>\fP
.br
\fR#include <map>\fP
.br
\fR#include <mutex>\fP
.br
\fR#include <string>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDwm::AssertionCounter\fP"
.br
.RI "Holds 'passed' and 'failed' counters\&. "
.ti -1c
.RI "class \fBDwm::Assertion\fP"
.br
.RI "Holds assertion information\&. "
.ti -1c
.RI "class \fBDwm::FunctionAssertions\fP"
.br
.RI "A container class to hold all assertions called from a single function\&. "
.ti -1c
.RI "class \fBDwm::FileAssertions\fP"
.br
.RI "A container class to hold all assertions called from a single source file\&. "
.ti -1c
.RI "class \fBDwm::Assertions\fP"
.br
.RI "A container to hold all assertions\&. Note everything is static here\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBUnitAssert\fP(e)"
.br
.RI "This macro is used just like assert(), but populates Assertions so we can report results at the end of tests using the members of Assertions\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBDwm::Assertions\fP class definition and \fBUnitAssert()\fP macro for unit tests\&. 


.SH "Macro Definition Documentation"
.PP 
.SS "#define UnitAssert( e)"
\fBValue:\fP
.nf
  ((e) ?                                             \\
  Dwm::Assertions::Passed(__FILE__, __PRETTY_FUNCTION__, __LINE__, #e) : \\
  Dwm::Assertions::Failed(__FILE__, __PRETTY_FUNCTION__, __LINE__, #e))
.PP
.fi

.PP
This macro is used just like assert(), but populates Assertions so we can report results at the end of tests using the members of Assertions\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
