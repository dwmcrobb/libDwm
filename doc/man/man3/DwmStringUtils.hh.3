.TH "DwmStringUtils.hh" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DwmStringUtils.hh \- Miscellaneous string utilities\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <cerrno>\fP
.br
\fR#include <cstdlib>\fP
.br
\fR#include <climits>\fP
.br
\fR#include <iomanip>\fP
.br
\fR#include <iostream>\fP
.br
\fR#include <limits>\fP
.br
\fR#include <sstream>\fP
.br
\fR#include <stdexcept>\fP
.br
\fR#include <string>\fP
.br
\fR#include <typeinfo>\fP
.br
\fR#include <vector>\fP
.br
\fR#include 'DwmTypeName\&.hh'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDwm::StringUtils::BadStringConversion\fP"
.br
.RI "Simple exception class for StringTo()\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBDwm::StringUtils::HasSuffix\fP (const std::string &str, const std::string &suffix)"
.br
.RI "Returns true if \fRstr\fP ends with \fRsuffix\fP\&. "
.ti -1c
.RI "bool \fBDwm::StringUtils::StringToVector\fP (const std::string &s, char sep, std::vector< std::string > &result, bool ignoreEmpty=true)"
.br
.RI "Populates \fRresult\fP with substrings from \fRs\fP, where each substring is separated by \fRsep\fP in \fRs\fP\&. "
.ti -1c
.RI "template<typename T > bool \fBDwm::StringUtils::StringToIntegral\fP (const std::string &s, T &target, int base=0)"
.br
.ti -1c
.RI "template<typename T > bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, T &target)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, std::string &target)"
.br
.RI "why anyone would every call this, I don't know\&. "
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, char &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, signed char &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, unsigned char &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, short &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, unsigned short &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, int &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, unsigned int &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, long &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, unsigned long &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, long long &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, unsigned long long &target, int base=0)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, float &target)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, double &target)"
.br
.ti -1c
.RI "bool \fBDwm::StringUtils::StringTo\fP (const std::string &s, bool &target)"
.br
.ti -1c
.RI "template<typename T > std::string \fBDwm::StringUtils::ToString\fP (const T &x, std::ios_base &(*iom)(std::ios_base &)=std::dec)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Miscellaneous string utilities\&. 


.SH "Function Documentation"
.PP 
.SS "bool Dwm::StringUtils::HasSuffix (const std::string & str, const std::string & suffix)"

.PP
Returns true if \fRstr\fP ends with \fRsuffix\fP\&. For example, HasSuffix('foo\&.cc','\&.cc') would return true\&. 
.SS "bool Dwm::StringUtils::StringToVector (const std::string & s, char sep, std::vector< std::string > & result, bool ignoreEmpty = \fRtrue\fP)"

.PP
Populates \fRresult\fP with substrings from \fRs\fP, where each substring is separated by \fRsep\fP in \fRs\fP\&. If \fRignoreEmpty\fP is true, all empty substrings (a result of immediately adjacent instances of \fRsep\fP or trailing instance(s) of \fRsep\fP) are excluded from \fRresult\fP\&. Returns true if any substrings were placed in \fRresult\fP\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
