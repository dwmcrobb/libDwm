.TH "Dwm::Ipv4TcpPayload" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::Ipv4TcpPayload \- Encapsulates a TCP payload\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmIpv4TcpPayload\&.hh>\fP
.PP
Inherits \fBDwm::DescriptorWritable\fP, \fBDwm::FileWritable\fP, \fBDwm::StreamWritable\fP, \fBDwm::StreamedLengthCapable\fP, \fBDwm::GZWritable\fP, and \fBDwm::BZ2Writable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIpv4TcpPayload\fP ()"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fBIpv4TcpPayload\fP (const \fBIpv4PacketHeader\fP &ipHeader, const \fBIpv4TcpHeader\fP &tcpHeader)"
.br
.RI "Construct based on an \fBIpv4PacketHeader\fP and \fBIpv4TcpHeader\fP that point into a TCP packet, which may have a payload following the TCP header\&. "
.ti -1c
.RI "\fBIpv4TcpPayload\fP (uint8_t *buf, uint16_t len)"
.br
.RI "Construct based on a pointer that points to the first byte of the payload in a TCP packet\&. "
.ti -1c
.RI "\fBIpv4TcpPayload\fP (const std::string &s)"
.br
.RI "Copy the given string into the payload\&. "
.ti -1c
.RI "\fB~Ipv4TcpPayload\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "std::pair< uint16_t, const uint8_t * > \fBPayload\fP () const"
.br
.RI "Returns a shallow copy of the payload\&. "
.ti -1c
.RI "std::string \fBToString\fP () const"
.br
.RI "Returns the payload as a string\&. "
.ti -1c
.RI "uint32_t \fBSum\fP () const"
.br
.RI "Returns the IP sum of the payload, which can be used as part of TCP checksum computation\&. "
.ti -1c
.RI "template<typename T > bool \fBGetPayload\fP (T &payload) const"
.br
.RI "Copies the payload into \fRpayload\fP\&. "
.ti -1c
.RI "template<typename T > bool \fBSetPayload\fP (const T &payload)"
.br
.RI "Sets the payload to \fRpayload\fP\&. "
.ti -1c
.RI "void \fBClear\fP ()"
.br
.RI "Clears the payload\&. "
.ti -1c
.RI "std::istream & \fBRead\fP (std::istream &is, uint16_t len)"
.br
.RI "Reads \fRlen\fP bytes of the payload from the given istream \fRis\fP\&. "
.ti -1c
.RI "std::ostream & \fBWrite\fP (std::ostream &os) const override"
.br
.RI "Writes the payload to the given ostream \fRos\fP\&. "
.ti -1c
.RI "ssize_t \fBRead\fP (int fd, uint16_t len)"
.br
.RI "Reads \fRlen\fP bytes of the payload from the given descriptor \fRfd\fP\&. "
.ti -1c
.RI "ssize_t \fBWrite\fP (int fd) const override"
.br
.RI "Writes the payload to the given descriptor \fRfd\fP\&. "
.ti -1c
.RI "size_t \fBRead\fP (FILE *f, uint16_t len)"
.br
.RI "Reads \fRlen\fP bytes of the payload from the given FILE \fRf\fP\&. "
.ti -1c
.RI "size_t \fBWrite\fP (FILE *f) const override"
.br
.RI "Writes the payload to the given FILE \fRf\fP\&. "
.ti -1c
.RI "int \fBRead\fP (gzFile gzf, uint16_t len)"
.br
.RI "Reads \fRlen\fP bytes of the payload from the given gzFile \fRgzf\fP\&. "
.ti -1c
.RI "int \fBWrite\fP (gzFile gzf) const override"
.br
.RI "Writes the payload to the given gzFile \fRgzf\fP\&. "
.ti -1c
.RI "int \fBBZRead\fP (BZFILE *bzf, uint16_t len)"
.br
.RI "Reads \fRlen\fP bytes of the payload from the given BZFILE \fRbzf\fP\&. "
.ti -1c
.RI "int \fBBZWrite\fP (BZFILE *bzf) const override"
.br
.RI "Writes the payload to the given BZFILE \fRbzf\fP\&. "
.ti -1c
.RI "uint64_t \fBStreamedLength\fP () const override"
.br
.RI "Returns the number of bytes that would be written if we called one of the \fBWrite()\fP members\&. "
.in -1c

Public Member Functions inherited from \fBDwm::DescriptorWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~DescriptorWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::FileWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~FileWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::StreamWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~StreamWritable\fP ()"
.br
.RI "Destructor\&. "
.in -1c

Public Member Functions inherited from \fBDwm::GZWritable\fP
.in +1c
.ti -1c
.RI "virtual \fB~GZWritable\fP ()"
.br
.RI "destructor "
.in -1c
.SH "Detailed Description"
.PP 
Encapsulates a TCP payload\&. 


.PP
\fBNote\fP
.RS 4
We don't inherit from \fBReadable\fP, \fBGZReadable\fP and BZ@Readable because our read members need to be passed a length\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "Dwm::Ipv4TcpPayload::Ipv4TcpPayload (const \fBIpv4PacketHeader\fP & ipHeader, const \fBIpv4TcpHeader\fP & tcpHeader)"

.PP
Construct based on an \fBIpv4PacketHeader\fP and \fBIpv4TcpHeader\fP that point into a TCP packet, which may have a payload following the TCP header\&. The underlying memory will not be copied, we'll just point to it\&. Hence the caller should not free the underlying memory while the \fBIpv4TcpPayload\fP is still in use\&. 
.SS "Dwm::Ipv4TcpPayload::Ipv4TcpPayload (uint8_t * buf, uint16_t len)"

.PP
Construct based on a pointer that points to the first byte of the payload in a TCP packet\&. The underlying memory will not be copied, we'll just point to it\&. Hence the caller should not free the underlying memory while the \fBIpv4TcpPayload\fP is still in use\&. 
.SH "Member Function Documentation"
.PP 
.SS "int Dwm::Ipv4TcpPayload::BZRead (BZFILE * bzf, uint16_t len)"

.PP
Reads \fRlen\fP bytes of the payload from the given BZFILE \fRbzf\fP\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "int Dwm::Ipv4TcpPayload::BZWrite (BZFILE * bzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the payload to the given BZFILE \fRbzf\fP\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::BZ2Writable\fP\&.
.SS "template<typename T > bool Dwm::Ipv4TcpPayload::GetPayload (T & payload) const\fR [inline]\fP"

.PP
Copies the payload into \fRpayload\fP\&. Returns true on success, false on failure\&. Note that payload must be a type natively supported by \fBDwm::StreamIO\fP or a type derived from \fBDwm::StreamReadable\fP\&. 
.SS "size_t Dwm::Ipv4TcpPayload::Read (FILE * f, uint16_t len)"

.PP
Reads \fRlen\fP bytes of the payload from the given FILE \fRf\fP\&. Returns 1 on success, 0 on failure (fread() semantics)\&. 
.SS "int Dwm::Ipv4TcpPayload::Read (gzFile gzf, uint16_t len)"

.PP
Reads \fRlen\fP bytes of the payload from the given gzFile \fRgzf\fP\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "ssize_t Dwm::Ipv4TcpPayload::Read (int fd, uint16_t len)"

.PP
Reads \fRlen\fP bytes of the payload from the given descriptor \fRfd\fP\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename T > bool Dwm::Ipv4TcpPayload::SetPayload (const T & payload)\fR [inline]\fP"

.PP
Sets the payload to \fRpayload\fP\&. Returns true on success, false on failure\&. Note that payload must be a type natively supported by \fBDwm::StreamIO\fP or a type derived from \fBDwm::StreamWritable\fP\&. 
.SS "uint64_t Dwm::Ipv4TcpPayload::StreamedLength () const\fR [override]\fP, \fR [virtual]\fP"

.PP
Returns the number of bytes that would be written if we called one of the \fBWrite()\fP members\&. 
.PP
Implements \fBDwm::StreamedLengthCapable\fP\&.
.SS "size_t Dwm::Ipv4TcpPayload::Write (FILE * f) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the payload to the given FILE \fRf\fP\&. Returns 1 on success, 0 on failure (fread() semantics)\&. 
.PP
Implements \fBDwm::FileWritable\fP\&.
.SS "int Dwm::Ipv4TcpPayload::Write (gzFile gzf) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the payload to the given gzFile \fRgzf\fP\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::GZWritable\fP\&.
.SS "ssize_t Dwm::Ipv4TcpPayload::Write (int fd) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the payload to the given descriptor \fRfd\fP\&. Returns the number of bytes written on success, -1 on failure\&. 
.PP
Implements \fBDwm::DescriptorWritable\fP\&.
.SS "std::ostream & Dwm::Ipv4TcpPayload::Write (std::ostream & os) const\fR [override]\fP, \fR [virtual]\fP"

.PP
Writes the payload to the given ostream \fRos\fP\&. 
.PP
Implements \fBDwm::StreamWritable\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
