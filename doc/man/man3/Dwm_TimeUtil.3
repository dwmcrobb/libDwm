.TH "Dwm::TimeUtil" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::TimeUtil \- This class is just a collection of time utility functions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmTimeUtil\&.hh>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBGmTime\fP (time_t unixsecs, struct tm &result)"
.br
.RI "This is just a convenient wrapper for gmtime(time_t *) that stores the result in \fRresult\fP\&. "
.ti -1c
.RI "static void \fBLocalTime\fP (time_t unixsecs, struct tm &result)"
.br
.RI "This is just a convenient wrapper for localtime(time_t *) that stores the result in \fRresult\fP\&. "
.ti -1c
.RI "static bool \fBSubtractTimeval\fP (const struct timeval &lhs, const struct timeval &rhs, struct timeval &result)"
.br
.RI "Subtracts \fRrhs\fP from \fRlhs\fP and places the result in \fRresult\fP\&. "
.ti -1c
.RI "static bool \fBParseDateTime\fP (const std::string &dateTimeString, struct tm &tm)"
.br
.RI "Parses \fRdateTimeString\fP and stores the resulting time in \fRtm\fP\&. "
.ti -1c
.RI "static bool \fBParseDateTime\fP (const std::string &dateTimeString, time_t &t)"
.br
.RI "Parses \fRdateTimeString\fP and stores the resulting time in \fRt\fP\&. "
.ti -1c
.RI "static time_t \fBMidnightDaysLater\fP (int daysLater)"
.br
.RI "Returns the time for midnight (00:00) at the given \fRdaysLater\fP\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class is just a collection of time utility functions\&. 
.SH "Member Function Documentation"
.PP 
.SS "static time_t Dwm::TimeUtil::MidnightDaysLater (int daysLater)\fR [static]\fP"

.PP
Returns the time for midnight (00:00) at the given \fRdaysLater\fP\&. For example, if \fRdaysLater\fP is 1, we'll return the upcoming midnight time (useful when rolling over log files, etc\&.)\&. 
.SS "static bool Dwm::TimeUtil::ParseDateTime (const std::string & dateTimeString, struct tm & tm)\fR [static]\fP"

.PP
Parses \fRdateTimeString\fP and stores the resulting time in \fRtm\fP\&. Returns true on success, false on failure\&. \fRdateTimeString\fP must contain a date of one of the following forms:
.PP
YYYYMMDD YYYY/MM/DD MM/DD/YYYY Jan DD, YYYY Jan DD YYYY
.PP
\fRdataTimeString\fP may have a space and a time after the date, where the time must be of the form HH:MM:SS (minutes and seconds are optional, and will default to 0 if not specified)\&. 
.SS "static bool Dwm::TimeUtil::ParseDateTime (const std::string & dateTimeString, time_t & t)\fR [static]\fP"

.PP
Parses \fRdateTimeString\fP and stores the resulting time in \fRt\fP\&. Returns true on success, false on failure\&. \fRdateTimeString\fP must contain a date of one of the following forms:
.PP
YYYYMMDD YYYY/MM/DD MM/DD/YYYY Jan DD, YYYY Jan DD YYYY
.PP
\fRdataTimeString\fP may have a space and a time after the date, where the time must be of the form HH:MM:SS (minutes and seconds are optional, and will default to 0 if not specified)\&. 
.SS "static bool Dwm::TimeUtil::SubtractTimeval (const struct timeval & lhs, const struct timeval & rhs, struct timeval & result)\fR [static]\fP"

.PP
Subtracts \fRrhs\fP from \fRlhs\fP and places the result in \fRresult\fP\&. Returns true if the result is positive (\fRlhs\fP greater than \fRrhs\fP), else returns false\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
