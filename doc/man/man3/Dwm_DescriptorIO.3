.TH "Dwm::DescriptorIO" 3 "libDwm-0.0.20240716" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dwm::DescriptorIO \- This class contains a collection of static functions for reading and writing simple types, in network byte order (MSB first)\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <DwmDescriptorIO\&.hh>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, char &c)"
.br
.RI "Reads \fRc\fP from \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, char c)"
.br
.RI "Writes \fRc\fP to \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, uint8_t &c)"
.br
.RI "Reads \fRc\fP from \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, uint8_t c)"
.br
.RI "Writes \fRc\fP to \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, bool &b)"
.br
.RI "Reads \fRb\fP from \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, bool b)"
.br
.RI "Writes \fRb\fP to \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, int16_t &val)"
.br
.RI "Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, int16_t val)"
.br
.RI "Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, uint16_t &val)"
.br
.RI "Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, uint16_t val)"
.br
.RI "Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, int32_t &val)"
.br
.RI "Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, int32_t val)"
.br
.RI "Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, uint32_t &val)"
.br
.RI "Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, uint32_t val)"
.br
.RI "Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, int64_t &val)"
.br
.RI "Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, const int64_t &val)"
.br
.RI "Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, uint64_t &val)"
.br
.RI "Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, const uint64_t &val)"
.br
.RI "Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, float &val)"
.br
.RI "Reads \fRval\fP from \fRfd\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, float val)"
.br
.RI "Writes \fRval\fP to \fRfd\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, double &val)"
.br
.RI "Reads \fRval\fP from \fRfd\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, const double &val)"
.br
.RI "Writes \fRval\fP to \fRfd\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, std::string &s)"
.br
.RI "Reads \fRs\fP from \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, const std::string &s)"
.br
.RI "Writes \fRs\fP to \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, \fBDescriptorReadable\fP &val)"
.br
.RI "Wrapper function to read a \fBDescriptorReadable\fP object from a descriptor\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, const \fBDescriptorWritable\fP &val)"
.br
.RI "Wrapper function to write a \fBDescriptorWritable\fP object to a descriptor\&. "
.ti -1c
.RI "template<typename _firstT , typename _secondT > static ssize_t \fBRead\fP (int fd, std::pair< _firstT, _secondT > &p)"
.br
.RI "Reads a pair<_firstT,_secondT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _firstT , typename _secondT > static ssize_t \fBWrite\fP (int fd, const std::pair< _firstT, _secondT > &p)"
.br
.RI "Writes a pair<_firstT,_secondT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::map< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Reads a map<_keyT,_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::map< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Writes a map<_keyT,_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::multimap< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Reads a multimap<_keyT,_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::multimap< _keyT, _valueT, _Compare, _Alloc > &m)"
.br
.RI "Writes a multimap<_keyT,_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , std::size_t N> static ssize_t \fBRead\fP (int fd, std::array< _valueT, N > &a)"
.br
.RI "Read an array<_valueT,N> from a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , std::size_t N> static ssize_t \fBWrite\fP (int fd, const std::array< _valueT, N > &a)"
.br
.RI "Writes an array<_valueT,N> to a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::vector< _valueT, _Alloc > &v)"
.br
.RI "Reads a vector<_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::vector< _valueT, _Alloc > &v)"
.br
.RI "Writes a vector<_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::deque< _valueT, _Alloc > &d)"
.br
.RI "Reads a deque<_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::deque< _valueT, _Alloc > &d)"
.br
.RI "Writes a deque<_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::list< _valueT, _Alloc > &l)"
.br
.RI "Reads a list<_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::list< _valueT, _Alloc > &l)"
.br
.RI "Writes a list<_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::set< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Reads a set<_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::set< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Writes a set<_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::multiset< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Reads a multiset<_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Compare , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::multiset< _valueT, _Compare, _Alloc > &l)"
.br
.RI "Writes a multiset<_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Args> static ssize_t \fBRead\fP (int fd, std::tuple< Args\&.\&.\&. > &t)"
.br
.RI "Reads a tuple from a file descriptor\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Args> static ssize_t \fBWrite\fP (int fd, const std::tuple< Args\&.\&.\&. > &t)"
.br
.RI "Writes a tuple to a file descriptor\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.RI "Reads an unordered_map<_keyT,_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.RI "Writes an unordered_map<_keyT,_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.RI "Reads an unordered_multimap<_keyT,_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.RI "Writes an unordered_multimap<_keyT,_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::unordered_set< _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.RI "Reads an unordered_set<_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::unordered_set< _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.RI "Writes an unordered_set<_valueT> to a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t \fBRead\fP (int fd, std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.RI "Reads an unordered_multiset<_valueT> from a file descriptor\&. "
.ti -1c
.RI "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t \fBWrite\fP (int fd, const std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > &m)"
.br
.RI "Writes an unordered_multiset<_valueT> to a file descriptor\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, std::monostate &sm)"
.br
.RI "Just a dummy helper function for std::variant instances that hold a std::monostate\&. "
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, const std::monostate &sm)"
.br
.RI "Just a dummy helper function for std::variant instances that hold a std::monostate\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Ts> static ssize_t \fBRead\fP (int fd, std::variant< Ts\&.\&.\&. > &v)"
.br
.RI "Reads a variant from a descriptor\&. "
.ti -1c
.RI "template<typename\&.\&.\&. Ts> static ssize_t \fBWrite\fP (int fd, const std::variant< Ts\&.\&.\&. > &v)"
.br
.RI "Writes a variant to a descriptor\&. "
.ti -1c
.RI "template<typename \&.\&.\&. Args> static ssize_t \fBReadV\fP (int fd, Args &\&.\&.\&.args)"
.br
.RI "Reads \fRargs\fP from \fRfd\fP\&. "
.ti -1c
.RI "template<typename \&.\&.\&. Args> static ssize_t \fBWriteV\fP (int fd, const Args &\&.\&.\&.args)"
.br
.RI "Writes \fRargs\fP to \fRfd\fP\&. "
.ti -1c
.RI "static ssize_t \fBRead\fP (int fd, void *buf, size_t buflen)"
.br
.ti -1c
.RI "static ssize_t \fBWrite\fP (int fd, const void *buf, size_t buflen)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class contains a collection of static functions for reading and writing simple types, in network byte order (MSB first)\&. 

It also contains functions to read and write strings\&. It also contains function templates to read and write arrays, deques, lists, vectors, maps, multimaps, sets, multisets, unordered_maps, unordered_multimaps, unordered_sets, unordered_multisets, tuples and variants\&. We use our member functions to handle reading and writing simple types in the containers, and function templates to handle reading and writing other class types\&. For a user-defined class, the class must implement the \fBDescriptorReadable\fP and \fBDescriptorWritable\fP interfaces, since our function templates simply call out to them\&. Since templates are static polymorphism, you don't need to inherit from \fBDescriptorReadable\fP and \fBDescriptorWritable\fP, but you must implement the interfaces\&. 
.SH "Member Function Documentation"
.PP 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, bool & b)\fR [static]\fP"

.PP
Reads \fRb\fP from \fRfd\fP\&. Returns the number of bytes read (1) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, char & c)\fR [static]\fP"

.PP
Reads \fRc\fP from \fRfd\fP\&. Returns the number of bytes read (1) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, double & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRfd\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. Returns number of bytes read (8) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, float & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRfd\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. Returns number of bytes read (4) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, int16_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. Returns number of bytes read (2) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, int32_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. Returns number of bytes read (4) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, int64_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. Returns number of bytes read (8) on success, less on failure\&. 
.SS "template<typename _valueT , std::size_t N> static ssize_t Dwm::DescriptorIO::Read (int fd, std::array< _valueT, N > & a)\fR [inline]\fP, \fR [static]\fP"

.PP
Read an array<_valueT,N> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::deque< _valueT, _Alloc > & d)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a deque<_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::list< _valueT, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a list<_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::map< _keyT, _valueT, _Compare, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a map<_keyT,_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, std::monostate & sm)\fR [inline]\fP, \fR [static]\fP"

.PP
Just a dummy helper function for std::variant instances that hold a std::monostate\&. This should only be called from our \fBRead()\fP for std::variant (via std::visit()), and does nothing\&. Returns 0\&. 
.SS "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::multimap< _keyT, _valueT, _Compare, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a multimap<_keyT,_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Compare , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::multiset< _valueT, _Compare, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a multiset<_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _firstT , typename _secondT > static ssize_t Dwm::DescriptorIO::Read (int fd, std::pair< _firstT, _secondT > & p)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a pair<_firstT,_secondT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Compare , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::set< _valueT, _Compare, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a set<_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, std::string & s)\fR [static]\fP"

.PP
Reads \fRs\fP from \fRfd\fP\&. Returns the number of bytes read on success, -1 on failure\&. Since we write strings with a 64-bit unsigned length value preceding the actual string, and always have a terminating NULL, this always reads at least 9 bytes on success\&. 
.SS "template<typename\&.\&.\&. Args> static ssize_t Dwm::DescriptorIO::Read (int fd, std::tuple< Args\&.\&.\&. > & t)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a tuple from a file descriptor\&. Returns the number of bytes read\&. 
.SS "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an unordered_map<_keyT,_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an unordered_multimap<_keyT,_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an unordered_multiset<_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::unordered_set< _valueT, _Hash, _Pred, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads an unordered_set<_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "template<typename\&.\&.\&. Ts> static ssize_t Dwm::DescriptorIO::Read (int fd, std::variant< Ts\&.\&.\&. > & v)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a variant from a descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static ssize_t Dwm::DescriptorIO::Read (int fd, std::vector< _valueT, _Alloc > & v)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads a vector<_valueT> from a file descriptor\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, uint16_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. Returns number of bytes read (2) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, uint32_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. Returns number of bytes read (4) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, uint64_t & val)\fR [static]\fP"

.PP
Reads \fRval\fP from \fRfd\fP, in network byte order (MSB first)\&. Returns number of bytes read (8) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Read (int fd, uint8_t & c)\fR [static]\fP"

.PP
Reads \fRc\fP from \fRfd\fP\&. Returns the number of bytes read (1) on success, less on failure\&. 
.SS "template<typename \&.\&.\&. Args> static ssize_t Dwm::DescriptorIO::ReadV (int fd, Args &\&.\&.\&. args)\fR [inline]\fP, \fR [static]\fP"

.PP
Reads \fRargs\fP from \fRfd\fP\&. Returns the number of bytes read on success, -1 on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, bool b)\fR [static]\fP"

.PP
Writes \fRb\fP to \fRfd\fP\&. Returns the number of bytes written (1) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, char c)\fR [static]\fP"

.PP
Writes \fRc\fP to \fRfd\fP\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, const double & val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRfd\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. Returns the number of bytes written (8) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, const int64_t & val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. Returns the number of bytes written (8) on success, less on failure\&. 
.SS "template<typename _valueT , std::size_t N> static ssize_t Dwm::DescriptorIO::Write (int fd, const std::array< _valueT, N > & a)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an array<_valueT,N> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::deque< _valueT, _Alloc > & d)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a deque<_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::list< _valueT, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a list<_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::map< _keyT, _valueT, _Compare, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a map<_keyT,_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, const std::monostate & sm)\fR [inline]\fP, \fR [static]\fP"

.PP
Just a dummy helper function for std::variant instances that hold a std::monostate\&. This should only be called from our \fBWrite()\fP for std::variant (via std::visit()), and does nothing\&. Returns 0\&. 
.SS "template<typename _keyT , typename _valueT , typename _Compare , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::multimap< _keyT, _valueT, _Compare, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a multimap<_keyT,_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Compare , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::multiset< _valueT, _Compare, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a multiset<_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _firstT , typename _secondT > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::pair< _firstT, _secondT > & p)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a pair<_firstT,_secondT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Compare , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::set< _valueT, _Compare, _Alloc > & l)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a set<_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, const std::string & s)\fR [static]\fP"

.PP
Writes \fRs\fP to \fRfd\fP\&. Returns the number of bytes written on success, -1 on failure\&. Note that a 64-bit value is written first, holding the length of the string\&. The terminating NULL is also written\&. Hence, on success this will always return a value of 9 or greater\&. 
.SS "template<typename\&.\&.\&. Args> static ssize_t Dwm::DescriptorIO::Write (int fd, const std::tuple< Args\&.\&.\&. > & t)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a tuple to a file descriptor\&. Returns the number of bytes written\&. 
.SS "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::unordered_map< _keyT, _valueT, _Hash, _Pred, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an unordered_map<_keyT,_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _keyT , typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::unordered_multimap< _keyT, _valueT, _Hash, _Pred, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an unordered_multimap<_keyT,_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::unordered_multiset< _valueT, _Hash, _Pred, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an unordered_multiset<_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Hash , typename _Pred , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::unordered_set< _valueT, _Hash, _Pred, _Alloc > & m)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes an unordered_set<_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename\&.\&.\&. Ts> static ssize_t Dwm::DescriptorIO::Write (int fd, const std::variant< Ts\&.\&.\&. > & v)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a variant to a descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "template<typename _valueT , typename _Alloc > static ssize_t Dwm::DescriptorIO::Write (int fd, const std::vector< _valueT, _Alloc > & v)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes a vector<_valueT> to a file descriptor\&. Returns the number of bytes written on success, -1 on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, const uint64_t & val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. Returns the number of bytes written (8) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, float val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRfd\fP, in IEEE format (see RFC 1832 and/or ANSI/IEEE Standard 754-1985)\&. Returns the number of bytes written (4) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, int16_t val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. Returns the number of bytes written (2) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, int32_t val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. Returns the number of bytes written (4) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, uint16_t val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. Returns the number of bytes written (2) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, uint32_t val)\fR [static]\fP"

.PP
Writes \fRval\fP to \fRfd\fP, in network byte order (MSB first)\&. Returns the number of bytes written (4) on success, less on failure\&. 
.SS "static ssize_t Dwm::DescriptorIO::Write (int fd, uint8_t c)\fR [static]\fP"

.PP
Writes \fRc\fP to \fRfd\fP\&. Returns the number of bytes written (1) on success, less on failure\&. 
.SS "template<typename \&.\&.\&. Args> static ssize_t Dwm::DescriptorIO::WriteV (int fd, const Args &\&.\&.\&. args)\fR [inline]\fP, \fR [static]\fP"

.PP
Writes \fRargs\fP to \fRfd\fP\&. Returns the number of bytes written on success, -1 on failure\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libDwm-0\&.0\&.20240716 from the source code\&.
